<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quick Select on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/quick-select/</link>
    <description>Recent content in Quick Select on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sun, 03 Mar 2019 23:24:48 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/quick-select/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K Closest Points to Origin</title>
      <link>http://www.hashnopolis.com/post/2019/03/k-closest-points-to-origin/</link>
      <pubDate>Sun, 03 Mar 2019 23:24:48 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/k-closest-points-to-origin/</guid>
      <description>We have a list of points on the plane. Find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance.)
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)
Example 1: Input: points = [[1,3],[-2,2]], K = 1 Output: [[-2,2]] Explanation: The distance between (1, 3) and the origin is sqrt(10).</description>
    </item>
    
    <item>
      <title>Kth Largest Element in an Array</title>
      <link>http://www.hashnopolis.com/post/2018/10/kth-largest-element-in-an-array/</link>
      <pubDate>Wed, 24 Oct 2018 23:38:20 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/kth-largest-element-in-an-array/</guid>
      <description>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.
Example 1: Input: [3,2,1,5,6,4] and k = 2 Output: 5  Example 2: Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4  Note: You may assume k is always valid, 1 ≤ k ≤ array&#39;s length.
Solution: Average time complexity: O(n) if we don’t need the sorted output, otherwise O(n+kLogk)</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greedy Algorithm on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/greedy-algorithm/</link>
    <description>Recent content in Greedy Algorithm on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sat, 02 Mar 2019 12:30:04 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/greedy-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Meeting Room</title>
      <link>http://www.hashnopolis.com/post/2019/03/meeting-room/</link>
      <pubDate>Sat, 02 Mar 2019 12:30:04 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/meeting-room/</guid>
      <description>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &amp;lt; ei), determine if a person could attend all meetings.
Example 1: Input: [[0,30],[5,10],[15,20]] Output: false  Example 2: Input: [[7,10],[2,4]] Output: true  Solution /** * Definition for an interval. * public class Interval { * int start; * int end; * Interval() { start = 0; end = 0; } * Interval(int s, int e) { start = s; end = e; } * } */ class Solution { public boolean canAttendMeetings(Interval[] intervals) { Arrays.</description>
    </item>
    
    <item>
      <title>Gas Station</title>
      <link>http://www.hashnopolis.com/post/2019/02/gas-station/</link>
      <pubDate>Thu, 28 Feb 2019 23:51:02 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/gas-station/</guid>
      <description>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].
You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.
Return the starting gas station&amp;rsquo;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</description>
    </item>
    
    <item>
      <title>Meeting Rooms II</title>
      <link>http://www.hashnopolis.com/post/2018/11/meeting-rooms-ii/</link>
      <pubDate>Sun, 11 Nov 2018 17:11:19 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/meeting-rooms-ii/</guid>
      <description>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &amp;lt; ei), find the minimum number of conference rooms required.
Example 1 Input: [[0, 30],[5, 10],[15, 20]] Output: 2  Example 2 Input: [[7,10],[2,4]] Output: 1  Solution # Definition for an interval. # class Interval: # def __init__(self, s=0, e=0): # self.start = s # self.end = e # |____| |_______| # |_______| |____| # Number of meeting rooms: 2 class Solution(object): def minMeetingRooms(self, intervals): &amp;quot;&amp;quot;&amp;quot; :type intervals: List[Interval] :rtype: int &amp;quot;&amp;quot;&amp;quot; starts, ends = [], [] length = len(intervals) for i in range(length): starts.</description>
    </item>
    
  </channel>
</rss>
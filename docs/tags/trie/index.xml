<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trie on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/trie/</link>
    <description>Recent content in Trie on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Thu, 08 Nov 2018 23:07:10 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/trie/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implement Trie Prefix Tree</title>
      <link>http://www.hashnopolis.com/post/2018/11/implement-trie-prefix-tree/</link>
      <pubDate>Thu, 08 Nov 2018 23:07:10 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/implement-trie-prefix-tree/</guid>
      <description>Implement a trie with insert, search, and startsWith methods.
Example Trie trie = new Trie(); trie.insert(&amp;quot;apple&amp;quot;); trie.search(&amp;quot;apple&amp;quot;); // returns true trie.search(&amp;quot;app&amp;quot;); // returns false trie.startsWith(&amp;quot;app&amp;quot;); // returns true trie.insert(&amp;quot;app&amp;quot;); trie.search(&amp;quot;app&amp;quot;); // returns true  Note You may assume that all inputs are consist of lowercase letters a-z. All inputs are guaranteed to be non-empty strings.
Solution # o(n) class TrieNode(): def __init__(self): self.children = {} self.isWholeWord = False class Trie: def __init__(self): &amp;quot;&amp;quot;&amp;quot; Initialize your data structure here.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>trie on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/trie/</link>
    <description>Recent content in trie on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Mon, 30 Mar 2020 22:59:16 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/trie/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maximum Xor of Two Numbers in an Array</title>
      <link>http://www.hashnopolis.com/post/maximum-xor-of-two-numbers-in-an-array/</link>
      <pubDate>Mon, 30 Mar 2020 22:59:16 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/maximum-xor-of-two-numbers-in-an-array/</guid>
      <description>Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai&amp;lt; 231.
Find the maximum result of ai XOR aj, where 0 ≤ i, j &amp;lt; n.
Could you do this in O(n) runtime?
Example Input: [3, 10, 5, 25, 2, 8] Output: 28 Explanation: The maximum result is 5 ^ 25 = 28. Solution (prefix hashset - less efficient) Time: O(N)
Space: O(1)
class Solution: def findMaximumXOR(self, nums: List[int]) -&amp;gt; int: # 0bxxxxxx - 0b L = len(bin(max(nums))) - 2 max_xor = 0 for i in range(L-1, -1, -1): max_xor &amp;lt;&amp;lt;= 1 print(&amp;#34;max_xor:&amp;#34;, bin(max_xor) ) # set the rightmost bit to 1 curr_xor = max_xor | 1 print(&amp;#34;curr_xor:&amp;#34;, bin(curr_xor) ) # highest (L-i) bits prefixes = {num &amp;gt;&amp;gt; i for num in nums} print(&amp;#34;prefixes:&amp;#34;, [bin(p) for p in prefixes] ) # as long as there exists a p that makes curr_xor^p &amp;gt; 0 # Update max_xor, if two of these prefixes could result in curr_xor.</description>
    </item>
    
    <item>
      <title>Lexicographical Numbers</title>
      <link>http://www.hashnopolis.com/post/lexicographical-numbers/</link>
      <pubDate>Sun, 16 Feb 2020 01:09:58 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/lexicographical-numbers/</guid>
      <description>Given an integer n, return 1 - n in lexicographical order.
For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].
Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.
Solution (iterative) class Solution: def lexicalOrder(self, n: int) -&amp;gt; List[int]: res = [0 for i in range(n)] curr = 1 for i in range(n): res[i] = curr # lower digits if curr * 10 &amp;lt;= n: curr *= 10 # higher digits else: # if curr is greater than n, we reverse it by /10 if curr &amp;gt;= n: curr //= 10 curr += 1 # if curr becomes X00000, we need to get rid of the trailing 0&amp;#39;s while curr % 10 == 0: curr //= 10 return res # Input: n = 50 # Output: [1,10,11,12,13,14,15,16,17,18,19,2,20,21,22,23,24,25,26,27,28,29,3,30,31,32,33,34,35,36,37,38,39,4,40,41,42,43,44,45,46,47,48,49,5,50,6,7,8,9] Solution (recursion) Recursion</description>
    </item>
    
    <item>
      <title>K Th Smallest in Lexicographical Order</title>
      <link>http://www.hashnopolis.com/post/k-th-smallest-in-lexicographical-order/</link>
      <pubDate>Thu, 13 Feb 2020 13:15:02 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/k-th-smallest-in-lexicographical-order/</guid>
      <description>Given integers n and k, find the lexicographically k-th smallest integer in the range from 1 to n.
Note: 1 ≤ k ≤ n ≤ 10^9.
Example Input: n: 13 k: 2 Output: 10 Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10. Solution class Solution: def findKthNumber(self, n: int, k: int) -&amp;gt; int: if n &amp;lt; k or k &amp;lt; 1: return 0 if n &amp;lt; 10: return k curr = 1 k -= 1 while k &amp;gt; 0: leap, prev, next = 0, curr, curr+1 while prev &amp;lt;= n: # update leap leap += min(n+1, next) - prev prev *= 10 next *= 10 if leap &amp;lt;= k: curr += 1 print(leap, &amp;#34;&amp;lt;= k; curr =&amp;#34;, curr) k -= leap else: curr *= 10 print(leap, &amp;#34;&amp;gt; k; curr =&amp;#34;, curr) k -= 1 return curr # Input: n=1300, k=50 # order: [1,10,100,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,101,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,102,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,103,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,104,1040,1041,1042] # Output: # 412 &amp;gt; k; curr = 10 # 111 &amp;gt; k; curr = 100 # 11 &amp;lt;= k; curr = 101 # 11 &amp;lt;= k; curr = 102 # 11 &amp;lt;= k; curr = 103 # 11 &amp;lt;= k; curr = 104 # 11 &amp;gt; k; curr = 1040 # 1 &amp;lt;= k; curr = 1041 # 1 &amp;lt;= k; curr = 1042 </description>
    </item>
    
    <item>
      <title>Implement Trie Prefix Tree</title>
      <link>http://www.hashnopolis.com/post/implement-trie-prefix-tree/</link>
      <pubDate>Thu, 08 Nov 2018 23:07:10 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/implement-trie-prefix-tree/</guid>
      <description>Implement a trie with insert, search, and startsWith methods.
Example Trie trie = new Trie(); trie.insert(&amp;quot;apple&amp;quot;); trie.search(&amp;quot;apple&amp;quot;); // returns true trie.search(&amp;quot;app&amp;quot;); // returns false trie.startsWith(&amp;quot;app&amp;quot;); // returns true trie.insert(&amp;quot;app&amp;quot;); trie.search(&amp;quot;app&amp;quot;); // returns true Note  You may assume that all inputs are consist of lowercase letters a-z. All inputs are guaranteed to be non-empty strings.  Solution Java
class Trie { class TrieNode { private TrieNode[] children; private final int R = 26; private boolean isWord; public TrieNode() { children = new TrieNode[R]; } public boolean containsKey(char ch) { return children[ch -&amp;#39;a&amp;#39;] !</description>
    </item>
    
    <item>
      <title>Add and Search Word Data Structure Design</title>
      <link>http://www.hashnopolis.com/post/add-and-search-word-data-structure-design/</link>
      <pubDate>Thu, 08 Nov 2018 22:37:27 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/add-and-search-word-data-structure-design/</guid>
      <description>Design a data structure that supports the following two operations:
void addWord(word) bool search(word) search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.
Example addWord(&amp;quot;bad&amp;quot;) addWord(&amp;quot;dad&amp;quot;) addWord(&amp;quot;mad&amp;quot;) search(&amp;quot;pad&amp;quot;) -&amp;gt; false search(&amp;quot;bad&amp;quot;) -&amp;gt; true search(&amp;quot;.ad&amp;quot;) -&amp;gt; true search(&amp;quot;b..&amp;quot;) -&amp;gt; true Note You may assume that all words are consist of lowercase letters a-z.
Solution </description>
    </item>
    
  </channel>
</rss>
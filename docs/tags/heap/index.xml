<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heap on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/heap/</link>
    <description>Recent content in Heap on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Mon, 14 Oct 2019 20:13:22 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/heap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Campus Bikes</title>
      <link>http://www.hashnopolis.com/post/2019/10/campus-bikes/</link>
      <pubDate>Mon, 14 Oct 2019 20:13:22 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/10/campus-bikes/</guid>
      <description>On a campus represented as a 2D grid, there are N workers and M bikes, with N &amp;lt;= M. Each worker and bike is a 2D coordinate on this grid.
Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index).</description>
    </item>
    
    <item>
      <title>Super Ugly Number</title>
      <link>http://www.hashnopolis.com/post/2019/09/super-ugly-number/</link>
      <pubDate>Sat, 14 Sep 2019 22:35:23 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/09/super-ugly-number/</guid>
      <description>Write a program to find the nth super ugly number.
Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.
Example: Input: n = 12, primes = [2,7,13,19] Output: 32 Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19] of size 4.  Note:  1 is a super ugly number for any given primes.</description>
    </item>
    
    <item>
      <title>Ugly Number II</title>
      <link>http://www.hashnopolis.com/post/2019/09/ugly-number-ii/</link>
      <pubDate>Wed, 11 Sep 2019 22:43:29 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/09/ugly-number-ii/</guid>
      <description>Write a program to find the n-th ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
Example: Input: n = 10 Output: 12 Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.  Note:  1 is typically treated as an ugly number. n does not exceed 1690.  Solution import heapq class Solution: def nthUglyNumber(self, n: int) -&amp;gt; int: if n &amp;lt;= 0: return 0 if n == 1: return 1 q = [1] visited = {1: True} removed = 0 ans = 0 while removed !</description>
    </item>
    
    <item>
      <title>Find Median From Data Stream</title>
      <link>http://www.hashnopolis.com/post/2019/03/find-median-from-data-stream/</link>
      <pubDate>Mon, 11 Mar 2019 13:34:41 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/find-median-from-data-stream/</guid>
      <description>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.
Example [2,3,4], the median is 3
[2,3], the median is (2 + 3) / 2 = 2.5
Design a data structure that supports the following two operations:
1. void addNum(int num) - Add a integer number from the data stream to the data structure.</description>
    </item>
    
    <item>
      <title>23. Merge k Sorted Lists</title>
      <link>http://www.hashnopolis.com/post/2018/08/23.-merge-k-sorted-lists/</link>
      <pubDate>Sun, 26 Aug 2018 17:54:18 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/08/23.-merge-k-sorted-lists/</guid>
      <description>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
Example: Input: [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6  Solution: Idea #1 - Brute force with sorting first:
Time complexity : O(NlogN)
Space complexity : O(N)
Idea #2 - Compare head nodes one by one:
Time complexity : O(kN)
Space complexity : O(N) - creating a new linked list or O(1) in-place</description>
    </item>
    
  </channel>
</rss>
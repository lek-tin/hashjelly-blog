<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>union-find on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/union-find/</link>
    <description>Recent content in union-find on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Tue, 11 Feb 2020 23:25:11 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/union-find/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Largest Component Size by Common Factor</title>
      <link>http://www.hashnopolis.com/post/2020/02/largest-component-size-by-common-factor/</link>
      <pubDate>Tue, 11 Feb 2020 23:25:11 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2020/02/largest-component-size-by-common-factor/</guid>
      <description>Given a non-empty array of unique positive integers A, consider the following graph:
 There are A.length nodes, labelled A[0] to A[A.length - 1]; There is an edge between A[i] and A[j] if and only if A[i] and A[j] share a common factor greater than 1.  Return the size of the largest connected component in the graph.
Example 1: Input: [4,6,15,35] Output: 4 Example 2: Input: [20,50,9,63] Output: 2 Example 3:  Input: [2,3,6,7,4,12,21,39] Output: 8 Note:  1 &amp;lt;= A.</description>
    </item>
    
    <item>
      <title>Longest Consecutive Sequence</title>
      <link>http://www.hashnopolis.com/post/2019/09/longest-consecutive-sequence/</link>
      <pubDate>Tue, 10 Sep 2019 12:01:01 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/09/longest-consecutive-sequence/</guid>
      <description>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
Your algorithm should run in O(n) complexity.
Example Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Solution # Time: `O(n)` class Solution: def longestConsecutive(self, nums: List[int]) -&amp;gt; int: # Count occurence of nums mapping = {} for num in nums: mapping[num] = True # init longest length longest = 0 # iterate over nums for num in nums: if num in mapping: # num exists in mapping =&amp;gt; init l = 1 l = 1 # num was counted, so we delete num del mapping[num] left, right = num-1, num+1 # Move left while left in mapping: # left was counted, so we delete left del mapping[left] left -= 1 l += 1 # Move right while right in mapping: # right was counted, so we delete right del mapping[right] right += 1 l += 1 # Update longest longest = max(longest, l) return longest </description>
    </item>
    
  </channel>
</rss>
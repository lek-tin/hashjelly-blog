<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Palindrome on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/palindrome/</link>
    <description>Recent content in Palindrome on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Tue, 22 Jan 2019 22:29:56 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/palindrome/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Longest Palindromic Substring</title>
      <link>http://www.hashnopolis.com/post/2019/01/longest-palindromic-substring/</link>
      <pubDate>Tue, 22 Jan 2019 22:29:56 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/01/longest-palindromic-substring/</guid>
      <description>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example 1 Input: &amp;quot;babad&amp;quot; Output: &amp;quot;bab&amp;quot; Note: &amp;quot;aba&amp;quot; is also a valid answer.  Example 2 Input: &amp;quot;cbbd&amp;quot; Output: &amp;quot;bb&amp;quot;  Solution Dynamic Programming
# https://leetcode.com/problems/longest-palindromic-substring/discuss/157861/Python3-DP-Solution-with-Lots-of-Comments # time: O(n^2) # space: O(n^2) class Solution(object): def longestPalindrome(self, s): &amp;quot;&amp;quot;&amp;quot; :type s: str :rtype: str &amp;quot;&amp;quot;&amp;quot; str_len = len(s) if str_len == 0: return &amp;quot;&amp;quot; # Initialize DP table (dimensions: str_len x str_len) memo = [[False for i in range(str_len)] for j in range(str_len)] start = 0 # Starting index of the longest palindrome max_len = 1 # Length of the longest palindrome # Fill DP table for single char palindromes for i in range(str_len): memo[i][i] = True # Fill DP table for 2 char long palindromes for i in range(str_len - 1): j = i + 1 if s[i] == s[j]: memo[i][j] = True start = i max_len = 2 # Fill DP table for palindromes of every other length # starting from 3 length = 3 for length in range(3, str_len + 1): for i in range(str_len - length + 1): j = i + (length - 1) if s[i] == s[j] and memo[i+1][j-1]: memo[i][j] = True start = i max_len = length solution = s[start: start + max_len] return solution  # time: O(n^2) # space: O(1) class Solution(object): def __init__(self): self.</description>
    </item>
    
    <item>
      <title>Valid Palindrome</title>
      <link>http://www.hashnopolis.com/post/2018/11/valid-palindrome/</link>
      <pubDate>Thu, 01 Nov 2018 22:39:07 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/valid-palindrome/</guid>
      <description>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
Note: For the purpose of this problem, we define empty string as valid palindrome.
Example 1 Input: &amp;quot;A man, a plan, a canal: Panama&amp;quot; Output: true  Example 2 Input: &amp;quot;race a car&amp;quot; Output: false  Solution class Solution: def isPalindrome(self, s): &amp;quot;&amp;quot;&amp;quot; :type s: str :rtype: bool &amp;quot;&amp;quot;&amp;quot; if not s: return True head = 0 tail = len(s) - 1 while head &amp;lt;= tail: cHead, cTail = s[head], s[tail] if not cHead.</description>
    </item>
    
  </channel>
</rss>
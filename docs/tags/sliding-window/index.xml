<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sliding Window on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/sliding-window/</link>
    <description>Recent content in Sliding Window on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Tue, 10 Sep 2019 00:38:42 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/sliding-window/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Subarray Product Less Than K</title>
      <link>http://www.hashnopolis.com/post/2019/09/subarray-product-less-than-k/</link>
      <pubDate>Tue, 10 Sep 2019 00:38:42 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/09/subarray-product-less-than-k/</guid>
      <description>Your are given an array of positive integers nums.
Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than k.
Example 1: Input: nums = [10, 5, 2, 6], k = 100 Output: 8 Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]. Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.</description>
    </item>
    
    <item>
      <title>Minimum Size Subarray Sum</title>
      <link>http://www.hashnopolis.com/post/2019/09/minimum-size-subarray-sum/</link>
      <pubDate>Sun, 08 Sep 2019 23:43:48 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/09/minimum-size-subarray-sum/</guid>
      <description>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn&amp;rsquo;t one, return 0 instead.
Example: Input: s = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: the subarray [4,3] has the minimal length under the problem constraint. Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).</description>
    </item>
    
    <item>
      <title>Minimum Window Substring</title>
      <link>http://www.hashnopolis.com/post/2019/03/minimum-window-substring/</link>
      <pubDate>Sat, 16 Mar 2019 16:05:09 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/minimum-window-substring/</guid>
      <description>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).
Example: Input: S = &amp;quot;ADOBECODEBANC&amp;quot;, T = &amp;quot;ABC&amp;quot; Output: &amp;quot;BANC&amp;quot;  Note:  If there is no such window in S that covers all characters in T, return the empty string &amp;ldquo;&amp;rdquo;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</description>
    </item>
    
    <item>
      <title>Longest Substring With at Most Two Distinct Characters</title>
      <link>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-two-distinct-characters/</link>
      <pubDate>Sat, 16 Mar 2019 13:30:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-two-distinct-characters/</guid>
      <description>Given a string s, find the length of the longest substring t that contains at most 2 distinct characters.
Example 1: Input: &amp;quot;eceba&amp;quot; Output: 3 Explanation: t is &amp;quot;ece&amp;quot; which its length is 3.  Example 2: Input: &amp;quot;ccaabbb&amp;quot; Output: 5 Explanation: t is &amp;quot;aabbb&amp;quot; which its length is 5.  Solution class Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { HashMap&amp;lt;Character, Integer&amp;gt; countMap = new HashMap&amp;lt;Character, Integer&amp;gt;(); int left = 0; int max = 0; for (int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Longest Substring With at Most K Distinct Characters</title>
      <link>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-k-distinct-characters/</link>
      <pubDate>Thu, 14 Mar 2019 01:03:53 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-k-distinct-characters/</guid>
      <description>Given a string, find the length of the longest substring T that contains at most k distinct characters.
Example 1: Input: s = &amp;quot;eceba&amp;quot;, k = 2 Output: 3 Explanation: T is &amp;quot;ece&amp;quot; which its length is 3.  Example 2: Input: s = &amp;quot;aa&amp;quot;, k = 1 Output: 2 Explanation: T is &amp;quot;aa&amp;quot; which its length is 2.  Solution class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { Map&amp;lt;Character, Integer&amp;gt; countMap = new HashMap&amp;lt;&amp;gt;(); int left = 0; int max = 0; for(int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Find All Anagrams in a String</title>
      <link>http://www.hashnopolis.com/post/2018/12/find-all-anagrams-in-a-string/</link>
      <pubDate>Sat, 15 Dec 2018 09:42:45 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/12/find-all-anagrams-in-a-string/</guid>
      <description>Given a string s and a non-empty string p, find all the start indices of p&amp;rsquo;s anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.
Example 1 Input: s: &amp;quot;cbaebabacd&amp;quot; p: &amp;quot;abc&amp;quot; Output: [0, 6] Explanation: The substring with start index = 0 is &amp;quot;cba&amp;quot;, which is an anagram of &amp;quot;abc&amp;quot;.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bianry Tree on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/bianry-tree/</link>
    <description>Recent content in Bianry Tree on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sat, 24 Aug 2019 23:50:51 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/bianry-tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Construct Binary Tree From Inorder and Postorder Traversal</title>
      <link>http://www.hashnopolis.com/post/2019/08/construct-binary-tree-from-inorder-and-postorder-traversal/</link>
      <pubDate>Sat, 24 Aug 2019 23:50:51 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/08/construct-binary-tree-from-inorder-and-postorder-traversal/</guid>
      <description>Given inorder and postorder traversal of a tree, construct the binary tree.
Note: You may assume that duplicates do not exist in the tree.
For example, given
inorder = [9,3,15,20,7] postorder = [9,15,7,20,3]  Return the following binary tree:
 3 / \ 9 20 / \ 15 7  Hint Solution: /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ // the idea is to start from the rightmst part of the postorder because that is always the root; then divide the inorder as per the value of the root call the right child first because after accesing the parent in postorder the right child is encountered first and then the left child class Solution { int postOrderIndex; public TreeNode buildTree(int[] inorder, int[] postorder) { postOrderIndex = postorder.</description>
    </item>
    
  </channel>
</rss>
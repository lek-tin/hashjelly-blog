<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prefix-sum on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/prefix-sum/</link>
    <description>Recent content in prefix-sum on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sat, 19 Oct 2019 22:11:13 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/prefix-sum/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maximum Value Array M Range Increment Operations</title>
      <link>http://www.hashnopolis.com/post/maximum-value-array-m-range-increment-operations/</link>
      <pubDate>Sat, 19 Oct 2019 22:11:13 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/maximum-value-array-m-range-increment-operations/</guid>
      <description>Consider an array of size n with all initial values as 0, we need to perform following m range increment operations.
increment(a, b, k) : Increment values from a to b by k. After m operations, we need to calculate the maximum of the values in the array.
Example 1 Input : n = 5 m = 3 a = 0, b = 1, k = 100 a = 1, b = 4, k = 100 a = 2, b = 3, k = 100 Output : 200 Explanation: Initially array = {0, 0, 0, 0, 0} After first operation: array = {100, 100, 0, 0, 0} After second operation: array = {100, 200, 100, 100, 100} After third operation: array = {100, 200, 200, 200, 100} Maximum element after m operations is 200.</description>
    </item>
    
    <item>
      <title>Subarray Sum Equals K</title>
      <link>http://www.hashnopolis.com/post/subarray-sum-equals-k/</link>
      <pubDate>Thu, 26 Sep 2019 15:33:32 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/subarray-sum-equals-k/</guid>
      <description>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.
Example 1 Input:nums = [1,1,1], k = 2 Output: 2 Note  The length of the array is in range [1, 20,000]. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].  Solution class Solution: def subarraySum(self, nums: List[int], k: int) -&amp;gt; int: N = len(nums) if not N or N == 0: return 0 sums = [ nums[0] for i in range(N) ] for i in range(1, N): sums[i] = sums[i-1] + nums[i] # initialization: prefix sum = 0 counter = { 0: 1 } res = 0 for s in sums: if s - k in counter: res += counter[s-k] counter[s] = counter.</description>
    </item>
    
    <item>
      <title>Maximum Subarray</title>
      <link>http://www.hashnopolis.com/post/maximum-subarray/</link>
      <pubDate>Wed, 20 Feb 2019 22:30:14 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/maximum-subarray/</guid>
      <description>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
Solution (Dynamic Programming) class Solution { public int maxSubArray(int[] nums) { if (nums.</description>
    </item>
    
  </channel>
</rss>
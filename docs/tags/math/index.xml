<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/math/</link>
    <description>Recent content in Math on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sat, 19 Oct 2019 22:09:30 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Consecutive Numbers Sum</title>
      <link>http://www.hashnopolis.com/post/2019/10/consecutive-numbers-sum/</link>
      <pubDate>Sat, 19 Oct 2019 22:09:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/10/consecutive-numbers-sum/</guid>
      <description>Given a positive integer N, how many ways can we write it as a sum of consecutive positive integers?
Example 1: Input: 5 Output: 2 Explanation: 5 = 5 = 2 + 3  Example 2: Input: 9 Output: 3 Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4  Example 3: Input: 15 Output: 4 Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5  Note  1 &amp;lt;= N &amp;lt;= 10 ^ 9.</description>
    </item>
    
    <item>
      <title>Strobogrammatic Number</title>
      <link>http://www.hashnopolis.com/post/2019/10/strobogrammatic-number/</link>
      <pubDate>Wed, 02 Oct 2019 17:53:56 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/10/strobogrammatic-number/</guid>
      <description>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
Write a function to determine if a number is strobogrammatic. The number is represented as a string.
Example 1: Input: &amp;quot;69&amp;quot; Output: true  Example 2: Input: &amp;quot;88&amp;quot; Output: true  Example 3: Input: &amp;quot;962&amp;quot; Output: false  Solution class Solution: def isStrobogrammatic(self, num: str) -&amp;gt; bool: pairs = { 1: 1, 6: 9, 8: 8, 9: 6, 0: 0 } mid = len(num)//2+1 for i in range(mid): leftNum = int(num[i]) rightNum = int(num[-i-1]) if leftNum not in pairs or pairs[leftNum] !</description>
    </item>
    
  </channel>
</rss>
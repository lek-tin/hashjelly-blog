<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/stack/</link>
    <description>Recent content in Stack on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Mon, 25 Feb 2019 23:58:00 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Largest Rectangle in Histogram</title>
      <link>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</link>
      <pubDate>Mon, 25 Feb 2019 23:58:00 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</guid>
      <description>Given n non-negative integers representing the histogram&amp;rsquo;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Example: Input: [2,1,5,6,2,3] Output: 10  Solution: Push height into the stack in ascending order.</description>
    </item>
    
    <item>
      <title>Min Stack</title>
      <link>http://www.hashnopolis.com/post/2018/10/min-stack/</link>
      <pubDate>Sun, 14 Oct 2018 23:55:15 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/min-stack/</guid>
      <description>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. - push(x) &amp;ndash; Push element x onto stack. - pop() &amp;ndash; Removes the element on top of the stack. - top() &amp;ndash; Get the top element. - getMin() &amp;ndash; Retrieve the minimum element in the stack. Example:
MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --&amp;gt; Returns -3. minStack.pop(); minStack.top(); --&amp;gt; Returns 0. minStack.</description>
    </item>
    
    <item>
      <title>Add Binary</title>
      <link>http://www.hashnopolis.com/post/2018/09/add-binary/</link>
      <pubDate>Wed, 05 Sep 2018 23:48:48 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/add-binary/</guid>
      <description>Given two binary strings, return their sum (also a binary string).
The input strings are both non-empty and contains only characters 1 or 0.
Example 1:
Input: a = &amp;quot;11&amp;quot;, b = &amp;quot;1&amp;quot; Output: &amp;quot;100&amp;quot;  Example 2:
Input: a = &amp;quot;1010&amp;quot;, b = &amp;quot;1011&amp;quot; Output: &amp;quot;10101&amp;quot;  Solution:
class Solution: def addBinary(self, a, b): &amp;quot;&amp;quot;&amp;quot; :type a: str :type b: str :rtype: str &amp;quot;&amp;quot;&amp;quot; result = [] carry = 0 i = len(a)-1 j = len(b)-1 while carry or i &amp;gt;= 0 or j &amp;gt;= 0: total = carry if i &amp;gt;= 0: total += int(a[i]) i -= 1 if j &amp;gt;= 0: total += int(b[j]) j -= 1 result.</description>
    </item>
    
  </channel>
</rss>
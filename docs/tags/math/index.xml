<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/math/</link>
    <description>Recent content in math on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Fri, 14 Feb 2020 02:12:57 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Powerful Integers</title>
      <link>http://www.hashnopolis.com/post/powerful-integers/</link>
      <pubDate>Fri, 14 Feb 2020 02:12:57 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/powerful-integers/</guid>
      <description>Given two positive integers x and y, an integer is powerful if it is equal to x^i + y^j for some integers i &amp;gt;= 0 and j &amp;gt;= 0.
Return a list of all powerful integers that have value less than or equal to bound.
You may return the answer in any order. In your answer, each value should occur at most once.
Example 1 Input: x = 2, y = 3, bound = 10 Output: [2,3,4,5,7,9,10] Explanation: 2 = 2^0 + 3^0 3 = 2^1 + 3^0 4 = 2^0 + 3^1 5 = 2^1 + 3^1 7 = 2^2 + 3^1 9 = 2^3 + 3^0 10 = 2^0 + 3^2 Example 2 Input: x = 3, y = 5, bound = 15 Output: [2,4,6,8,10,14] Note  1 &amp;lt;= x &amp;lt;= 100 1 &amp;lt;= y &amp;lt;= 100 0 &amp;lt;= bound &amp;lt;= 10^6  Hint If x^i &amp;gt; bound, the sum x^i + y^j can&amp;rsquo;t be less than or equal to the bound.</description>
    </item>
    
    <item>
      <title>Consecutive Numbers Sum</title>
      <link>http://www.hashnopolis.com/post/consecutive-numbers-sum/</link>
      <pubDate>Sat, 19 Oct 2019 22:09:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/consecutive-numbers-sum/</guid>
      <description>Given a positive integer N, how many ways can we write it as a sum of consecutive positive integers?
Example 1 Input: 5 Output: 2 Explanation: 5 = 5 = 2 + 3 Example 2 Input: 9 Output: 3 Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4 Example 3 Input: 15 Output: 4 Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5 Note  1 &amp;lt;= N &amp;lt;= 10 ^ 9.</description>
    </item>
    
    <item>
      <title>Strobogrammatic Number</title>
      <link>http://www.hashnopolis.com/post/strobogrammatic-number/</link>
      <pubDate>Wed, 02 Oct 2019 17:53:56 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/strobogrammatic-number/</guid>
      <description>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
Write a function to determine if a number is strobogrammatic. The number is represented as a string.
Example 1 Input: &amp;quot;69&amp;quot; Output: true Example 2 Input: &amp;quot;88&amp;quot; Output: true Example 3 Input: &amp;quot;962&amp;quot; Output: false Solution class Solution: def isStrobogrammatic(self, num: str) -&amp;gt; bool: pairs = { 1: 1, 6: 9, 8: 8, 9: 6, 0: 0 } mid = len(num)//2+1 for i in range(mid): leftNum = int(num[i]) rightNum = int(num[-i-1]) if leftNum not in pairs or pairs[leftNum] !</description>
    </item>
    
    <item>
      <title>Sum of Square Numbers</title>
      <link>http://www.hashnopolis.com/post/sum-of-square-numbers/</link>
      <pubDate>Fri, 20 Sep 2019 00:21:44 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/sum-of-square-numbers/</guid>
      <description>Given a non-negative integer c, your task is to decide whether there&amp;rsquo;re two integers a and b such that a2 + b2 = c.
Example 1 Input: 5 Output: True Explanation: 1 * 1 + 2 * 2 = 5 Example 2 Input: 3 Output: False Solution import math class Solution: def judgeSquareSum(self, c: int) -&amp;gt; bool: if c &amp;lt;= 1: return True sqrt = math.ceil(math.sqrt(c)) left, right = 0, sqrt-1 while left*left + right*right &amp;lt; c: if (left+1)*(left+1) + right*right &amp;gt; c: right -= 1 else: left += 1 if left*left + right*right == c: return True return False Without sqrt function</description>
    </item>
    
    <item>
      <title>Valid Perfect Square</title>
      <link>http://www.hashnopolis.com/post/valid-perfect-square/</link>
      <pubDate>Thu, 19 Sep 2019 23:47:10 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/valid-perfect-square/</guid>
      <description>Given a positive integer num, write a function which returns True if num is a perfect square else False.
Note Do not use any built-in library function such as sqrt.
Example 1 Input: 16 Output: true Example 2 Input: 14 Output: false Solution (naive) Java
class Solution { public boolean isPerfectSquare(int num) { if (num == 1) return true; for (int i = 2; i &amp;lt; num; i++) { if (i * i == num) { return true; } if (i * i &amp;gt; num) { break; } } return false; } } Solution (Binary Search version 1) Let x be the square root, 1 &amp;lt; x &amp;lt; num/2 always holds true.</description>
    </item>
    
    <item>
      <title>Valid Number</title>
      <link>http://www.hashnopolis.com/post/valid-number/</link>
      <pubDate>Wed, 05 Sep 2018 23:43:50 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/valid-number/</guid>
      <description>Validate if a given string can be interpreted as a decimal number.
Some examples: &amp;quot;0&amp;quot; =&amp;gt; true
&amp;quot; 0.1 &amp;quot; =&amp;gt; true
&amp;quot;abc&amp;quot; =&amp;gt; false
&amp;quot;1 a&amp;quot; =&amp;gt; false
&amp;quot;2e10&amp;quot; =&amp;gt; true
&amp;quot; -90e3 &amp;quot; =&amp;gt; true
&amp;quot; 1e&amp;quot; =&amp;gt; false
&amp;quot;e3&amp;quot; =&amp;gt; false
&amp;quot; 6e-1&amp;quot; =&amp;gt; true
&amp;quot; 99e2.5 &amp;quot; =&amp;gt; false
&amp;quot;53.5e93&amp;quot; =&amp;gt; true
&amp;quot; --6 &amp;quot; =&amp;gt; false
&amp;quot;-+3&amp;quot; =&amp;gt; false
&amp;quot;95a54e53&amp;quot; =&amp;gt; false
Note It is intended for the problem statement to be ambiguous.</description>
    </item>
    
    <item>
      <title>Happy Number</title>
      <link>http://www.hashnopolis.com/post/happy-number/</link>
      <pubDate>Tue, 02 Apr 2002 01:44:12 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/happy-number/</guid>
      <description>Write an algorithm to determine if a number is &amp;ldquo;happy&amp;rdquo;.
A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</description>
    </item>
    
  </channel>
</rss>
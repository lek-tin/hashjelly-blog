<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hashset on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/hashset/</link>
    <description>Recent content in hashset on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Thu, 26 Mar 2020 04:15:15 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/hashset/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design Hashset</title>
      <link>http://www.hashnopolis.com/post/design-hashset/</link>
      <pubDate>Thu, 26 Mar 2020 04:15:15 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/design-hashset/</guid>
      <description>Design a HashSet without using any built-in hash table libraries.
To be specific, your design should include these functions:
 add(value): Insert a value into the HashSet. contains(value): Return whether the value exists in the HashSet or not. remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.  Example MyHashSet hashSet = new MyHashSet(); hashSet.add(1); hashSet.add(2); hashSet.contains(1); // returns true hashSet.contains(3); // returns false (not found) hashSet.</description>
    </item>
    
    <item>
      <title>Most Common Word</title>
      <link>http://www.hashnopolis.com/post/most-common-word/</link>
      <pubDate>Thu, 07 Mar 2019 23:04:58 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/most-common-word/</guid>
      <description>Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words. It is guaranteed there is at least one word that isn&amp;rsquo;t banned, and that the answer is unique.
Words in the list of banned words are given in lowercase, and free of punctuation. Words in the paragraph are not case sensitive. The answer is in lowercase.
Example: Input: paragraph = &amp;quot;Bob hit a ball, the hit BALL flew far after it was hit.</description>
    </item>
    
    <item>
      <title>Intersection of Two Arrays II</title>
      <link>http://www.hashnopolis.com/post/intersection-of-two-arrays-ii/</link>
      <pubDate>Mon, 18 Feb 2019 23:55:24 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/intersection-of-two-arrays-ii/</guid>
      <description>Given two arrays, write a function to compute their intersection.
Example 1 Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] Example 2 Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Note Each element in the result should appear as many times as it shows in both arrays. The result can be in any order.
Follow up:  What if the given array is already sorted? How would you optimize your algorithm?</description>
    </item>
    
    <item>
      <title>Intersection of Two Arrays</title>
      <link>http://www.hashnopolis.com/post/intersection-of-two-arrays/</link>
      <pubDate>Wed, 28 Nov 2018 23:56:14 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/intersection-of-two-arrays/</guid>
      <description>Given two arrays, write a function to compute their intersection.
Example 1 Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2 Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Note  Each element in the result must be unique. The result can be in any order.  Solution Use binary search when one of the lists is very long and the other is short
class Solution: def intersection(self, nums1: List[int], nums2: List[int]) -&amp;gt; List[int]: if len(nums1) &amp;lt; len(nums2): return self.</description>
    </item>
    
  </channel>
</rss>
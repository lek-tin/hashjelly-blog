<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kadanes Algorithm on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/kadanes-algorithm/</link>
    <description>Recent content in Kadanes Algorithm on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Wed, 20 Feb 2019 22:30:14 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/kadanes-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maximum Subarray</title>
      <link>http://www.hashnopolis.com/post/2019/02/maximum-subarray/</link>
      <pubDate>Wed, 20 Feb 2019 22:30:14 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/maximum-subarray/</guid>
      <description>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.  Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
Solution: Dynamic Programming
class Solution { public int maxSubArray(int[] nums) { if (nums.</description>
    </item>
    
  </channel>
</rss>
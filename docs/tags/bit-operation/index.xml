<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bit-operation on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/bit-operation/</link>
    <description>Recent content in bit-operation on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sat, 15 Sep 2018 12:56:41 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/bit-operation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Power of Two</title>
      <link>http://www.hashnopolis.com/post/power-of-two/</link>
      <pubDate>Sat, 15 Sep 2018 12:56:41 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/power-of-two/</guid>
      <description>Given an integer, write a function to determine if it is a power of two.
Example 1 Input: 1 Output: true Explanation: 2**0 = 1 Example 2 Input: 16 Output: true Explanation: 2**4 = 16 Example 3 Input: 218 Output: false Solution class Solution: def isPowerOfTwo(self, n): &amp;#34;&amp;#34;&amp;#34; :type n: int :rtype: bool &amp;#34;&amp;#34;&amp;#34; if n == 0: return False if n &amp;amp; (n - 1) == 0: return True return False </description>
    </item>
    
    <item>
      <title>Single Number III</title>
      <link>http://www.hashnopolis.com/post/single-number-iii/</link>
      <pubDate>Fri, 14 Sep 2018 11:54:43 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/single-number-iii/</guid>
      <description>Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.
For example: Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].
Note  The order of the result is not important. So in the above example, [5, 3] is also correct. Your algorithm should run in linear runtime complexity.</description>
    </item>
    
    <item>
      <title>Single Number II</title>
      <link>http://www.hashnopolis.com/post/single-number-ii/</link>
      <pubDate>Fri, 14 Sep 2018 11:53:51 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/single-number-ii/</guid>
      <description>Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.
Note Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Example 1 Input: [2,2,3,2] Output: 3 Example 2 Input: [0,1,0,1,0,1,99] Output: 99 Solution class Solution: def singleNumber(self, nums): &amp;#34;&amp;#34;&amp;#34; :type nums: List[int] :rtype: int &amp;#34;&amp;#34;&amp;#34; # https://www.cnblogs.com/ganganloveu/p/4110996.html # https://blog.csdn.net/karen0310/article/details/78226261 ones, twos = 0, 0 for _, num in enumerate(nums): ones = (ones ^ num) &amp;amp; ~twos twos = (twos ^ num) &amp;amp; ~ones print(bin(num), &amp;#34;ones: &amp;#34;, bin(ones), &amp;#34;twos: &amp;#34;, bin(twos)) return ones </description>
    </item>
    
    <item>
      <title>Single Number</title>
      <link>http://www.hashnopolis.com/post/single-number/</link>
      <pubDate>Fri, 14 Sep 2018 11:53:00 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/single-number/</guid>
      <description>Given a non-empty array of integers, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Example 1:
Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 Solution:
// Java class Solution { public int singleNumber(int[] nums) { int result=0; for(int num : nums) { result=result^num; } return result; } } </description>
    </item>
    
  </channel>
</rss>
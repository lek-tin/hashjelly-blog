<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/two-pointers/</link>
    <description>Recent content on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Thu, 09 Apr 2020 01:53:50 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/two-pointers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backspace String Compare</title>
      <link>http://www.hashnopolis.com/post/backspace-string-compare/</link>
      <pubDate>Thu, 09 Apr 2020 01:53:50 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/backspace-string-compare/</guid>
      <description>Solution (build string ‚ùå) Time: O(N)
Space: O(N)
class Solution: def backspaceCompare(self, S: str, T: str) -&amp;gt; bool: res_1 = self.helper(S) res_2 = self.helper(T) return len(res_1) == len(res_2) and res_1 == res_2 def helper(self, s): stack = [] for c in s: if c != &amp;#34;#&amp;#34;: stack.append(c) else: if len(stack) &amp;gt; 0: stack.pop() return &amp;#34;&amp;#34;.join(stack) s
Solution (two pointers üëçüèº) Time: O(N)
Space: O(1)
from itertools import zip_longest class Solution: def backspaceCompare(self, S: str, T: str) -&amp;gt; bool: return all( a == b for a, b in zip_longest(self.</description>
    </item>
    
    <item>
      <title>Flatten 2d Vector</title>
      <link>http://www.hashnopolis.com/post/flatten-2d-vector/</link>
      <pubDate>Thu, 26 Mar 2020 03:11:06 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/flatten-2d-vector/</guid>
      <description>Design and implement an iterator to flatten a 2d vector. It should support the following operations: next and hasNext.
Example Vector2D iterator = new Vector2D([[1,2],[3],[4]]); iterator.next(); // return 1 iterator.next(); // return 2 iterator.next(); // return 3 iterator.hasNext(); // return true iterator.hasNext(); // return true iterator.next(); // return 4 iterator.hasNext(); // return false Notes  Please remember to RESET your class variables declared in Vector2D, as static/class variables are persisted across multiple test cases.</description>
    </item>
    
    <item>
      <title>Interval List Intersections</title>
      <link>http://www.hashnopolis.com/post/interval-list-intersections/</link>
      <pubDate>Mon, 16 Mar 2020 01:53:48 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/interval-list-intersections/</guid>
      <description>Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
(Formally, a closed interval [a, b] (with a &amp;lt;= b) denotes the set of real numbers x with a &amp;lt;= x &amp;lt;= b. The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.</description>
    </item>
    
    <item>
      <title>String Compression</title>
      <link>http://www.hashnopolis.com/post/string-compression/</link>
      <pubDate>Sat, 14 Mar 2020 23:17:08 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/string-compression/</guid>
      <description>Given an array of characters, compress it in-place.
The length after compression must always be smaller than or equal to the original array.
Every element of the array should be a character (not int) of length 1.
After you are done modifying the input array in-place, return the new length of the array.
Follow up Could you solve it using only O(1) extra space?
Example 1 Input: [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;] Output: Return 6, and the first 6 characters of the input array should be: [&amp;quot;a&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;3&amp;quot;] Explanation: &amp;quot;aa&amp;quot; is replaced by &amp;quot;a2&amp;quot;.</description>
    </item>
    
    <item>
      <title>Reverse Words in a String Iii</title>
      <link>http://www.hashnopolis.com/post/reverse-words-in-a-string-iii/</link>
      <pubDate>Thu, 12 Mar 2020 01:53:02 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/reverse-words-in-a-string-iii/</guid>
      <description>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.
Example 1 Input: &amp;quot;Let&#39;s take LeetCode contest&amp;quot; Output: &amp;quot;s&#39;teL ekat edoCteeL tsetnoc&amp;quot; Note In the string, each word is separated by single space and there will not be any extra space in the string.
Solution class Solution: def reverseWords(self, s: str) -&amp;gt; str: N = len(s) start = 0 s = list(s) res = &amp;#34;&amp;#34; while start &amp;lt; N: while start &amp;lt; N and s[start] == &amp;#34; &amp;#34;: start += 1 stop = start while stop &amp;lt; N and s[stop] !</description>
    </item>
    
    <item>
      <title>Reverse String II</title>
      <link>http://www.hashnopolis.com/post/reverse-string-ii/</link>
      <pubDate>Thu, 12 Mar 2020 01:39:31 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/reverse-string-ii/</guid>
      <description>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.
Example Input: s = &amp;quot;abcdefg&amp;quot;, k = 2 Output: &amp;quot;bacdfeg&amp;quot; Restrictions: The string consists of lower English letters only.</description>
    </item>
    
    <item>
      <title>Reverse String</title>
      <link>http://www.hashnopolis.com/post/reverse-string/</link>
      <pubDate>Thu, 12 Mar 2020 01:37:43 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/reverse-string/</guid>
      <description>Write a function that reverses a string. The input string is given as an array of characters char[].
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
You may assume all the characters consist of printable ascii characters.
Example 1 Input: [&amp;quot;h&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;o&amp;quot;] Output: [&amp;quot;o&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;h&amp;quot;] Example 2 Input: [&amp;quot;H&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;h&amp;quot;] Output: [&amp;quot;h&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;H&amp;quot;] Solution class Solution: def reverseString(self, s: List[str]) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34; Do not return anything, modify s in-place instead.</description>
    </item>
    
    <item>
      <title>Optimal Utilization</title>
      <link>http://www.hashnopolis.com/post/optimal-utilization/</link>
      <pubDate>Mon, 02 Mar 2020 05:15:27 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/optimal-utilization/</guid>
      <description>Given 2 lists a and b. Each element is a pair of integers where the first integer represents the unique id and the second integer represents a value. Your task is to find an element from a and an element form b such that the sum of their values is less or equal to target and as close to target as possible. Return a list of ids of selected elements. If no pair is possible, return an empty list.</description>
    </item>
    
    <item>
      <title>Squares of a Sorted Array</title>
      <link>http://www.hashnopolis.com/post/squares-of-a-sorted-array/</link>
      <pubDate>Mon, 10 Feb 2020 20:20:33 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/squares-of-a-sorted-array/</guid>
      <description>Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.
Example 1 Input: [-4,-1,0,3,10] Output: [0,1,9,16,100] Example 2 Input: [-7,-3,2,3,11] Output: [4,9,9,49,121] Note  1 &amp;lt;= A.length &amp;lt;= 10000 -10000 &amp;lt;= A[i] &amp;lt;= 10000 A is sorted in non-decreasing order.  Solution class Solution: def sortedSquares(self, A: List[int]) -&amp;gt; List[int]: result = A[:] leftPtr, rightPtr = 0, len(A)-1 i = 0 while leftPtr &amp;lt;= rightPtr: i += 1 if abs(A[leftPtr]) &amp;lt;= abs(A[rightPtr]): result[-i] = A[rightPtr] * A[rightPtr] rightPtr -= 1 else: result[-i] = A[leftPtr] * A[leftPtr] leftPtr += 1 return result </description>
    </item>
    
    <item>
      <title>Subarray Product Less Than K</title>
      <link>http://www.hashnopolis.com/post/subarray-product-less-than-k/</link>
      <pubDate>Tue, 10 Sep 2019 00:38:42 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/subarray-product-less-than-k/</guid>
      <description>Your are given an array of positive integers nums.
Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than k.
Example 1 Input: nums = [10, 5, 2, 6], k = 100 Output: 8 Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]. Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.</description>
    </item>
    
    <item>
      <title>Minimum Size Subarray Sum</title>
      <link>http://www.hashnopolis.com/post/minimum-size-subarray-sum/</link>
      <pubDate>Sun, 08 Sep 2019 23:43:48 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/minimum-size-subarray-sum/</guid>
      <description>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ‚â• s. If there isn&amp;rsquo;t one, return 0 instead.
Example: Input: s = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: the subarray [4,3] has the minimal length under the problem constraint. Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).</description>
    </item>
    
    <item>
      <title>Valid Triangle Number</title>
      <link>http://www.hashnopolis.com/post/valid-triangle-number/</link>
      <pubDate>Sun, 25 Aug 2019 01:33:06 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/valid-triangle-number/</guid>
      <description>Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
Example 1 Input: [2,2,3,4] Output: 3 Explanation: Valid combinations are:
2,3,4 (using the first 2) 2,3,4 (using the second 2) 2,2,3
Note  The length of the given array won&amp;rsquo;t exceed 1000. The integers in the given array are in the range of [0, 1000].</description>
    </item>
    
    <item>
      <title>Palindrome Linked List</title>
      <link>http://www.hashnopolis.com/post/palindrome-linked-list/</link>
      <pubDate>Sat, 24 Aug 2019 17:36:35 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/palindrome-linked-list/</guid>
      <description>Given a singly linked list, determine if it is a palindrome.
Example 1 Input: 1-&amp;gt;2 Output: false Example 2 Input: 1-&amp;gt;2-&amp;gt;2-&amp;gt;1 Output: true Follow up: Could you do it in O(n) time and O(1) space?
Solution # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def isPalindrome(self, head: ListNode) -&amp;gt; bool: if not head: return True middle = self.</description>
    </item>
    
    <item>
      <title>3sum With Multiplicity</title>
      <link>http://www.hashnopolis.com/post/3sum-with-multiplicity/</link>
      <pubDate>Sat, 24 Aug 2019 14:58:50 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/3sum-with-multiplicity/</guid>
      <description>Given an integer array A, and an integer target, return the number of tuples i, j, k such that i &amp;lt; j &amp;lt; k and A[i] + A[j] + A[k] == target.
As the answer can be very large, return it modulo 10^9 + 7.
Example 1 Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8 Output: 20 Explanation: Enumerating by the values (A[i], A[j], A[k]): (1, 2, 5) occurs 8 times; (1, 3, 4) occurs 8 times; (2, 2, 4) occurs 2 times; (2, 3, 3) occurs 2 times.</description>
    </item>
    
    <item>
      <title>Two Sum Less Than K</title>
      <link>http://www.hashnopolis.com/post/two-sum-less-than-k/</link>
      <pubDate>Thu, 22 Aug 2019 00:41:20 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/two-sum-less-than-k/</guid>
      <description>Given an array A of integers and integer K, return the maximum S such that there exists i &amp;lt; j with A[i] + A[j] = S and S &amp;lt; K. If no i, j exist satisfying this equation, return -1.
Example 1 Input: A = [34,23,1,24,75,33,54,8], K = 60 Output: 58 Explanation: We can use 34 and 24 to sum 58 which is less than 60. Example 2 Input: A = [10,20,30], K = 15 Output: -1 Explanation: In this case it&#39;s not possible to get a pair sum less that 15.</description>
    </item>
    
    <item>
      <title>Two Sum Iv Input Is a Bst</title>
      <link>http://www.hashnopolis.com/post/two-sum-iv-input-is-a-bst/</link>
      <pubDate>Mon, 19 Aug 2019 23:01:32 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/two-sum-iv-input-is-a-bst/</guid>
      <description>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.
Example 1 Input: 5 / \ 3 6 / \ \ 2 4 7 Target = 9 Output: True Example 2 Input: 5 / \ 3 6 / \ \ 2 4 7 Target = 28 Output: False Solution # time: `O(n)` # space: `O(n)` # Definition for a binary tree node.</description>
    </item>
    
    <item>
      <title>Two Sum</title>
      <link>http://www.hashnopolis.com/post/two-sum/</link>
      <pubDate>Mon, 19 Aug 2019 00:44:49 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/two-sum/</guid>
      <description>Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. Solution # time: `O(n)` # space: `O(n)` class Solution: def twoSum(self, nums, target): &amp;#34;&amp;#34;&amp;#34; :type nums: List[int] :type target: int :rtype: List[int] &amp;#34;&amp;#34;&amp;#34; res = [-1, -1] if nums == None or len(nums) &amp;lt; 2: return res solutionMap = {} for pos in range(len(nums) - 1): if (target - nums[pos]) in solutionMap: res[0] = solutionMap[target - nums[pos]] res[1] = pos break solutionMap[nums[pos]] = pos return res # time: o(nlogn) # space: o(1) class Pair: def __init__(self, index, val): self.</description>
    </item>
    
    <item>
      <title>Two Sum II Input Array Is Sorted</title>
      <link>http://www.hashnopolis.com/post/two-sum-ii-input-array-is-sorted/</link>
      <pubDate>Sun, 18 Aug 2019 23:53:18 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/two-sum-ii-input-array-is-sorted/</guid>
      <description>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.
Note  Your returned answers (both index1 and index2) are not zero-based. You may assume that each input would have exactly one solution and you may not use the same element twice.</description>
    </item>
    
    <item>
      <title>Reverse Linked List</title>
      <link>http://www.hashnopolis.com/post/reverse-linked-list/</link>
      <pubDate>Sat, 10 Aug 2019 23:51:13 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/reverse-linked-list/</guid>
      <description>Reverse a singly linked list.
Example: Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?
Solution: /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode cur = head, prev = null, after = new ListNode(0); // null 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 -&amp;gt; NULL  // prev cur after  while (cur !</description>
    </item>
    
    <item>
      <title>Closest Two Sum</title>
      <link>http://www.hashnopolis.com/post/closest-two-sum/</link>
      <pubDate>Sat, 16 Mar 2019 18:25:42 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/closest-two-sum/</guid>
      <description>Given an array nums of n integers, find two integers in nums such that the sum is closest to a given number, target.
Return the difference between the sum of the two integers and the target.
Example Given array nums = [-1, 2, 1, -4], and target = 4. The minimum difference is 1. (4 - (2 + 1) = 1). Challenge: Do it in O(nlogn) time complexity. Solution public class Solution { /* * @param nums: an integer array * @param target: An integer * @return: the difference between the sum and the target */ public int twoSumClosest(int[] nums, int target) { if (nums == null &amp;amp;&amp;amp; nums.</description>
    </item>
    
    <item>
      <title>Minimum Window Substring</title>
      <link>http://www.hashnopolis.com/post/minimum-window-substring/</link>
      <pubDate>Sat, 16 Mar 2019 16:05:09 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/minimum-window-substring/</guid>
      <description>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).
Example: Input: S = &amp;quot;ADOBECODEBANC&amp;quot;, T = &amp;quot;ABC&amp;quot; Output: &amp;quot;BANC&amp;quot; Note  If there is no such window in S that covers all characters in T, return the empty string &amp;ldquo;&amp;quot;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</description>
    </item>
    
    <item>
      <title>Longest Substring With at Most Two Distinct Characters</title>
      <link>http://www.hashnopolis.com/post/longest-substring-with-at-most-two-distinct-characters/</link>
      <pubDate>Sat, 16 Mar 2019 13:30:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/longest-substring-with-at-most-two-distinct-characters/</guid>
      <description>Given a string s, find the length of the longest substring t that contains at most 2 distinct characters.
Example 1 Input: &amp;quot;eceba&amp;quot; Output: 3 Explanation: t is &amp;quot;ece&amp;quot; which its length is 3. Example 2 Input: &amp;quot;ccaabbb&amp;quot; Output: 5 Explanation: t is &amp;quot;aabbb&amp;quot; which its length is 5. Solution class Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { HashMap&amp;lt;Character, Integer&amp;gt; countMap = new HashMap&amp;lt;Character, Integer&amp;gt;(); int left = 0; int max = 0; for (int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Trapping Rain Water</title>
      <link>http://www.hashnopolis.com/post/trapping-rain-water/</link>
      <pubDate>Sat, 26 Jan 2019 23:39:49 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/trapping-rain-water/</guid>
      <description>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Solution 1 Time: O(n)
Space: O(1)
class Solution { public int trap(int[] height) { int n = height.</description>
    </item>
    
    <item>
      <title>Container With Most Water</title>
      <link>http://www.hashnopolis.com/post/container-with-most-water/</link>
      <pubDate>Sat, 26 Jan 2019 23:38:02 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/container-with-most-water/</guid>
      <description>Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note You may not slant the container and n is at least 2. The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7].</description>
    </item>
    
    <item>
      <title>One Edit Distance</title>
      <link>http://www.hashnopolis.com/post/one-edit-distance/</link>
      <pubDate>Wed, 16 Jan 2019 15:52:52 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/one-edit-distance/</guid>
      <description>Given two strings s and t, determine if they are both one edit distance apart.
Note There are 3 possiblities to satisify one edit distance apart:
 Insert a character into s to get t Delete a character from s to get t Replace a character of s to get t  Example 1 Input: s = &amp;quot;ab&amp;quot;, t = &amp;quot;acb&amp;quot; Output: true Explanation: We can insert &#39;c&#39; into s to get t.</description>
    </item>
    
    <item>
      <title>Increasing Triplet Subsequence</title>
      <link>http://www.hashnopolis.com/post/increasing-triplet-subsequence/</link>
      <pubDate>Thu, 08 Nov 2018 22:10:52 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/increasing-triplet-subsequence/</guid>
      <description>Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.
Formally the function should:
Return true if there exists i, j, k such that arr[i] &amp;lt; arr[j] &amp;lt; arr[k] given 0 ‚â§ i &amp;lt; j &amp;lt; k ‚â§ n-1 else return false.
Note Your algorithm should run in O(n) time complexity and O(1) space complexity. Example 1 Input: [1,2,3,4,5] Output: true Example 2 Input: [5,4,3,2,1] Output: false Solution import math class Solution: def increasingTriplet(self, nums: List[int]) -&amp;gt; bool: if not nums or len(nums) &amp;lt; 3: return False # min_1 &amp;lt; min_2 min_1, min_2 = math.</description>
    </item>
    
    <item>
      <title>Move Zeroes</title>
      <link>http://www.hashnopolis.com/post/move-zeroes/</link>
      <pubDate>Sat, 03 Nov 2018 16:25:23 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/move-zeroes/</guid>
      <description>Given an array nums, write a function to move all 0&#39;s to the end of it while maintaining the relative order of the non-zero elements.
For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].
Note You must do this in-place without making a copy of the array. Minimize the total number of operations.
Credit Special thanks to @jianchao.</description>
    </item>
    
    <item>
      <title>Kth Largest Element in an Array</title>
      <link>http://www.hashnopolis.com/post/kth-largest-element-in-an-array/</link>
      <pubDate>Wed, 24 Oct 2018 23:38:20 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/kth-largest-element-in-an-array/</guid>
      <description>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.
Example 1 Input: [3,2,1,5,6,4] and k = 2 Output: 5 Example 2 Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4 Note You may assume k is always valid, 1 ‚â§ k ‚â§ array&#39;s length.
Solution Average time complexity: O(n) if we don‚Äôt need the sorted output, otherwise O(n+kLogk)</description>
    </item>
    
    <item>
      <title>Linked List Cycle II</title>
      <link>http://www.hashnopolis.com/post/linked-list-cycle-ii/</link>
      <pubDate>Sun, 21 Oct 2018 23:08:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/linked-list-cycle-ii/</guid>
      <description>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
Note: Do not modify the linked list.
Follow up: Can you solve it without using extra space?
Observation: Solution: /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head) { if (head == null) return null; ListNode slow = head; ListNode fast = head; boolean hasCycle = false; while (slow.</description>
    </item>
    
    <item>
      <title>Linked List Cycle</title>
      <link>http://www.hashnopolis.com/post/linked-list-cycle/</link>
      <pubDate>Sun, 21 Oct 2018 23:07:55 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/linked-list-cycle/</guid>
      <description>Given a linked list, determine if it has a cycle in it.
Follow-up Can you solve it without using extra space?
Solution # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def hasCycle(self, head): &amp;#34;&amp;#34;&amp;#34; :type head: ListNode :rtype: bool &amp;#34;&amp;#34;&amp;#34; slow = head fast = head while fast: # fast reaches the end, no cycle was detected if fast and not fast.</description>
    </item>
    
    <item>
      <title>Remove Duplicates From Sorted List II</title>
      <link>http://www.hashnopolis.com/post/remove-duplicates-from-sorted-list-ii/</link>
      <pubDate>Wed, 19 Sep 2018 10:38:38 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/remove-duplicates-from-sorted-list-ii/</guid>
      <description>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Example 1 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 Output: 1-&amp;gt;2-&amp;gt;5 Example 2 Input: 1-&amp;gt;1-&amp;gt;1-&amp;gt;2-&amp;gt;3 Output: 2-&amp;gt;3 </description>
    </item>
    
    <item>
      <title>Remove Linked List Elements</title>
      <link>http://www.hashnopolis.com/post/remove-linked-list-elements/</link>
      <pubDate>Tue, 18 Sep 2018 16:07:09 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/remove-linked-list-elements/</guid>
      <description>Remove all elements from a linked list of integers that have value val.
Example Input: 1-&amp;gt;2-&amp;gt;6-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;6, val = 6 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 Solution # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def removeElements(self, head, val): &amp;#34;&amp;#34;&amp;#34; :type head: ListNode :type val: int :rtype: ListNode &amp;#34;&amp;#34;&amp;#34; pre = ListNode(0) pre.next = head pos = pre while pos.next != None: if pos.</description>
    </item>
    
    <item>
      <title>Remove Element</title>
      <link>http://www.hashnopolis.com/post/remove-element/</link>
      <pubDate>Sun, 16 Sep 2018 15:02:20 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/remove-element/</guid>
      <description>Given an array nums and a value val, remove all instances of that value in-place and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
The order of elements can be changed. It doesn&amp;rsquo;t matter what you leave beyond the new length.
Example 1 Given nums = [3,2,2,3], val = 3, Your function should return length = 2, with the first two elements of nums being 2.</description>
    </item>
    
    <item>
      <title>80. Remove Duplicates From Sorted Array II</title>
      <link>http://www.hashnopolis.com/post/80.-remove-duplicates-from-sorted-array-ii/</link>
      <pubDate>Fri, 24 Aug 2018 00:48:48 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/80.-remove-duplicates-from-sorted-array-ii/</guid>
      <description>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Example 1 Given nums = [1,1,1,2,2,3], Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</description>
    </item>
    
    <item>
      <title>Remove Duplicates From Sorted Array</title>
      <link>http://www.hashnopolis.com/post/remove-duplicates-from-sorted-array/</link>
      <pubDate>Thu, 23 Aug 2018 23:52:17 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/remove-duplicates-from-sorted-array/</guid>
      <description>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Example 1 Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the returned length.</description>
    </item>
    
    <item>
      <title>3sum</title>
      <link>http://www.hashnopolis.com/post/3sum/</link>
      <pubDate>Thu, 23 Aug 2018 23:29:18 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/3sum/</guid>
      <description>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] Solution # time: o(n^2) # space: o(1) class Solution: def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]: results = [] if not nums: return results nums.</description>
    </item>
    
    <item>
      <title>Remove Nth Node From End of List</title>
      <link>http://www.hashnopolis.com/post/remove-nth-node-from-end-of-list/</link>
      <pubDate>Mon, 20 Aug 2018 23:33:38 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/remove-nth-node-from-end-of-list/</guid>
      <description>Given a linked list, remove the n-th node from the end of list and return its head.
Example Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5. Note Given n will always be valid.
Follow-up Could you do this in one pass?
Solution # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.</description>
    </item>
    
  </channel>
</rss>
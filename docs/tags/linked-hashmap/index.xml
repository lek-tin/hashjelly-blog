<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linked-hashmap on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/linked-hashmap/</link>
    <description>Recent content in linked-hashmap on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Tue, 28 Apr 2020 03:53:12 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/linked-hashmap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Unique Number</title>
      <link>http://www.hashnopolis.com/post/first-unique-number/</link>
      <pubDate>Tue, 28 Apr 2020 03:53:12 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/first-unique-number/</guid>
      <description>You have a queue of integers, you need to retrieve the first unique integer in the queue.
Implement the FirstUnique class:
 FirstUnique(int[] nums) Initializes the object with the numbers in the queue. int showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer. void add(int value) insert value to the queue.  Example 1 Input: [&amp;quot;FirstUnique&amp;quot;,&amp;quot;showFirstUnique&amp;quot;,&amp;quot;add&amp;quot;,&amp;quot;showFirstUnique&amp;quot;,&amp;quot;add&amp;quot;,&amp;quot;showFirstUnique&amp;quot;,&amp;quot;add&amp;quot;,&amp;quot;showFirstUnique&amp;quot;] [[[2,3,5]],[],[5],[],[2],[],[3],[]] Output: [null,2,null,2,null,3,null,-1] Explanation: FirstUnique firstUnique = new FirstUnique([2,3,5]); firstUnique.</description>
    </item>
    
    <item>
      <title>LRU Cache</title>
      <link>http://www.hashnopolis.com/post/lru-cache/</link>
      <pubDate>Sun, 11 Nov 2018 15:33:09 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/lru-cache/</guid>
      <description>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</description>
    </item>
    
  </channel>
</rss>
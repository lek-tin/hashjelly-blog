<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stack on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/stack/</link>
    <description>Recent content in stack on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Thu, 05 Mar 2020 02:24:46 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Daily Temperatures</title>
      <link>http://www.hashnopolis.com/post/2020/03/daily-temperatures/</link>
      <pubDate>Thu, 05 Mar 2020 02:24:46 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2020/03/daily-temperatures/</guid>
      <description>Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.
For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</description>
    </item>
    
    <item>
      <title>Minimum Remove to Make Valid Parentheses</title>
      <link>http://www.hashnopolis.com/post/2020/01/minimum-remove-to-make-valid-parentheses/</link>
      <pubDate>Thu, 23 Jan 2020 00:28:47 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2020/01/minimum-remove-to-make-valid-parentheses/</guid>
      <description>Given a string s of &#39;(&#39; , &#39;)&#39; and lowercase English characters.
Your task is to remove the minimum number of parentheses ( &#39;(&#39; or &#39;)&#39;, in any positions ) so that the resulting parentheses string is valid and return any valid string.
Formally, a parentheses string is valid if and only if:
 It is the empty string, contains only lowercase characters, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string.</description>
    </item>
    
    <item>
      <title>Longest Valid Parentheses</title>
      <link>http://www.hashnopolis.com/post/2019/11/longest-valid-parentheses/</link>
      <pubDate>Sat, 30 Nov 2019 03:24:56 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/11/longest-valid-parentheses/</guid>
      <description>Given a string containing just the characters &#39;(&#39; and &#39;)&#39;, find the length of the longest valid (well-formed) parentheses substring.
Example 1: Input: &amp;quot;(()&amp;quot; Output: 2 Explanation: The longest valid parentheses substring is &amp;quot;()&amp;quot; Example 2: Input: &amp;quot;)()())&amp;quot; Output: 4 Explanation: The longest valid parentheses substring is &amp;quot;()()&amp;quot; Solution Dynamic programming
// Time: `O(n)` // Space: `O(n)` public class Solution { public int longestValidParentheses(String s) { int maxans = 0; // dp array: ith element of dp represents the length of the longest valid substring ending at ith index.</description>
    </item>
    
    <item>
      <title>Prefix Postfix Conversion</title>
      <link>http://www.hashnopolis.com/post/2019/10/prefix-postfix-conversion/</link>
      <pubDate>Sat, 19 Oct 2019 22:15:17 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/10/prefix-postfix-conversion/</guid>
      <description>Prefix : An expression is called the prefix expression if the operator appears in the expression before the operands. Simply of the form (operator operand1 operand2). Example : *+AB-CD (Infix : (A+B) * (C-D) )
Postfix: An expression is called the postfix expression if the operator appears in the expression after the operands. Simply of the form (operand1 operand2 operator). Example : AB+CD-* (Infix : (A+B * (C-D) )
Given a Prefix expression, convert it into a Postfix expression.</description>
    </item>
    
    <item>
      <title>Inorder Successor in BST</title>
      <link>http://www.hashnopolis.com/post/2019/08/inorder-successor-in-bst/</link>
      <pubDate>Thu, 22 Aug 2019 00:23:43 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/08/inorder-successor-in-bst/</guid>
      <description>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.
The successor of a node p is the node with the smallest key greater than p.val.
Example 1: Input: root = [2,1,3], p = 1 Output: 2 Explanation: 1&#39;s in-order successor node is 2. Note that both p and the return value is of TreeNode type. Example 2: Input: root = [5,3,6,2,4,null,null,1], p = 6 Output: null Explanation: There is no in-order successor of the current node, so the answer is null.</description>
    </item>
    
    <item>
      <title>Max Stack</title>
      <link>http://www.hashnopolis.com/post/2019/03/max-stack/</link>
      <pubDate>Sun, 31 Mar 2019 02:37:36 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/max-stack/</guid>
      <description>Design a max stack that supports push, pop, top, peekMax and popMax.
 push(x) &amp;ndash; Push element x onto stack. pop() &amp;ndash; Remove the element on top of the stack and return it. top() &amp;ndash; Get the element on the top. peekMax() &amp;ndash; Retrieve the maximum element in the stack. popMax() &amp;ndash; Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.</description>
    </item>
    
    <item>
      <title>Maximum Frequency Stack</title>
      <link>http://www.hashnopolis.com/post/2019/03/maximum-frequency-stack/</link>
      <pubDate>Tue, 12 Mar 2019 03:52:37 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/maximum-frequency-stack/</guid>
      <description>Implement FreqStack, a class which simulates the operation of a stack-like data structure.
FreqStack has two functions:
 push(int x), which pushes an integer x onto the stack. pop(), which removes and returns the most frequent element in the stack. If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.  Example 1: Input: [&amp;quot;FreqStack&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;], [[],[5],[7],[5],[7],[4],[5],[],[],[],[]] Output: [null,null,null,null,null,null,null,5,7,5,4] Explanation: After making six .</description>
    </item>
    
    <item>
      <title>Largest Rectangle in Histogram</title>
      <link>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</link>
      <pubDate>Mon, 25 Feb 2019 23:58:00 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</guid>
      <description>Given n non-negative integers representing the histogram&amp;rsquo;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Example: Input: [2,1,5,6,2,3] Output: 10 Solution: Push height into the stack in ascending order. When we encounter a height that is shorter than te top of the stack, we start to calculate area by popping heights out of the stack.</description>
    </item>
    
    <item>
      <title>Valid Parentheses</title>
      <link>http://www.hashnopolis.com/post/2018/11/valid-parentheses/</link>
      <pubDate>Fri, 02 Nov 2018 20:30:23 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/valid-parentheses/</guid>
      <description>Given a string containing just the characters &amp;lsquo;(&#39;, &amp;lsquo;)&#39;, &amp;lsquo;{&#39;, &amp;lsquo;}&#39;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&#39;, determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Note that an empty string is also considered valid.
Example 1: Input: &amp;quot;()&amp;quot; Output: true Example 2: Input: &amp;quot;()[]{}&amp;quot; Output: true Example 3: Input: &amp;quot;(]&amp;quot; Output: false Example 4: Input: &amp;quot;([)]&amp;quot; Output: false Example 5: Input: &amp;quot;{[]}&amp;quot; Output: true Solution: class Solution { public boolean isValid(String s) { HashMap&amp;lt;Character, Character&amp;gt; charMap = new HashMap&amp;lt;&amp;gt;(); charMap.</description>
    </item>
    
    <item>
      <title>Min Stack</title>
      <link>http://www.hashnopolis.com/post/2018/10/min-stack/</link>
      <pubDate>Sun, 14 Oct 2018 23:55:15 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/min-stack/</guid>
      <description>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
 push(x) &amp;ndash; Push element x onto stack. pop() &amp;ndash; Removes the element on top of the stack. top() &amp;ndash; Get the top element. getMin() &amp;ndash; Retrieve the minimum element in the stack.  Example MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --&amp;gt; Returns -3. minStack.pop(); minStack.top(); --&amp;gt; Returns 0. minStack.getMin(); --&amp;gt; Returns -2.</description>
    </item>
    
    <item>
      <title>Add Binary</title>
      <link>http://www.hashnopolis.com/post/2018/09/add-binary/</link>
      <pubDate>Wed, 05 Sep 2018 23:48:48 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/add-binary/</guid>
      <description>Given two binary strings, return their sum (also a binary string).
The input strings are both non-empty and contains only characters 1 or 0.
Example 1 Input: a = &amp;#34;11&amp;#34;, b = &amp;#34;1&amp;#34; Output: &amp;#34;100&amp;#34; Example 2 Input: a = &amp;#34;1010&amp;#34;, b = &amp;#34;1011&amp;#34; Output: &amp;#34;10101&amp;#34; Solution class Solution: def addBinary(self, a, b): &amp;#34;&amp;#34;&amp;#34; :type a: str :type b: str :rtype: str &amp;#34;&amp;#34;&amp;#34; result = [] carry = 0 i = len(a)-1 j = len(b)-1 while carry or i &amp;gt;= 0 or j &amp;gt;= 0: total = carry if i &amp;gt;= 0: total += int(a[i]) i -= 1 if j &amp;gt;= 0: total += int(b[j]) j -= 1 result.</description>
    </item>
    
  </channel>
</rss>
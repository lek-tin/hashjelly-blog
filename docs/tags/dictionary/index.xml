<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dictionary on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/dictionary/</link>
    <description>Recent content in dictionary on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Mon, 22 Oct 2018 12:01:59 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/dictionary/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Group Anagrams</title>
      <link>http://www.hashnopolis.com/post/group-anagrams/</link>
      <pubDate>Mon, 22 Oct 2018 12:01:59 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/group-anagrams/</guid>
      <description>Given an array of strings, group anagrams together.
Example Input: [&amp;quot;eat&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;tan&amp;quot;, &amp;quot;ate&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;bat&amp;quot;], Output: [ [&amp;quot;ate&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;], [&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;], [&amp;quot;bat&amp;quot;] ] Note  All inputs will be in lowercase. The order of your output does not matter.  Solution (naive) Time: O(Nklogk), k: length of the longest word
Space: O(Nk)
sort each word and use it the sorted str as a key to the lookup dictionary
class Solution: def groupAnagrams(self, strs: List[str]) -&amp;gt; List[List[str]]: ans = collections.</description>
    </item>
    
  </channel>
</rss>
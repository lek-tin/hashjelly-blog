<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sort on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/sort/</link>
    <description>Recent content in sort on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Wed, 08 Apr 2020 07:21:58 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/sort/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reorder Data in Log Files</title>
      <link>http://www.hashnopolis.com/post/reorder-data-in-log-files/</link>
      <pubDate>Fri, 08 Nov 2019 23:56:44 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/reorder-data-in-log-files/</guid>
      <description>You have an array of logs. Each log is a space delimited string of words.
For each log, the first word in each log is an alphanumeric identifier. Then, either:
Each word after the identifier will consist only of lowercase letters, or; Each word after the identifier will consist only of digits. We will call these two varieties of logs letter-logs and digit-logs. It is guaranteed that each log has at least one word after its identifier.</description>
    </item>
    
    <item>
      <title>Campus Bikes</title>
      <link>http://www.hashnopolis.com/post/campus-bikes/</link>
      <pubDate>Mon, 14 Oct 2019 20:13:22 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/campus-bikes/</guid>
      <description>On a campus represented as a 2D grid, there are N workers and M bikes, with N &amp;lt;= M. Each worker and bike is a 2D coordinate on this grid.
Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index).</description>
    </item>
    
    <item>
      <title>Pancake Sorting</title>
      <link>http://www.hashnopolis.com/post/pancake-sorting/</link>
      <pubDate>Sun, 15 Sep 2019 21:03:31 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/pancake-sorting/</guid>
      <description>Given an array A, we can perform a pancake flip: We choose some positive integer k &amp;lt;= A.length, then reverse the order of the first k elements of A. We want to perform zero or more pancake flips (doing them one after another in succession) to sort the array A.
Return the k-values corresponding to a sequence of pancake flips that sort A. Any valid answer that sorts the array within 10 * A.</description>
    </item>
    
    <item>
      <title>Best Meeting Point</title>
      <link>http://www.hashnopolis.com/post/best-meeting-point/</link>
      <pubDate>Thu, 21 Feb 2019 10:15:51 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/best-meeting-point/</guid>
      <description>A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.
Example: Input: 1 - 0 - 0 - 0 - 1 | | | | | 0 - 0 - 0 - 0 - 0 | | | | | 0 - 0 - 1 - 0 - 0 Output: 6 ###Explanation: Given three people living at (0,0), (0,4), and (2,2): The point (0,2) is an ideal meeting point, as the total travel distance of 2+2+2=6 is minimal.</description>
    </item>
    
    <item>
      <title>56. Merge Intervals</title>
      <link>http://www.hashnopolis.com/post/56.-merge-intervals/</link>
      <pubDate>Fri, 24 Aug 2018 02:19:05 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/56.-merge-intervals/</guid>
      <description>Given a collection of intervals, merge all overlapping intervals.
Example 1 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. Example 2 Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping. Solution # Definition for an interval. # class Interval: # def __init__(self, s=0, e=0): # self.start = s # self.end = e class Solution: def merge(self, intervals): &amp;#34;&amp;#34;&amp;#34; :type intervals: List[Interval] :rtype: List[Interval] &amp;#34;&amp;#34;&amp;#34; intervals.</description>
    </item>
    
  </channel>
</rss>
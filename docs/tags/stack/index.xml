<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/stack/</link>
    <description>Recent content in Stack on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sun, 31 Mar 2019 02:37:36 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Max Stack</title>
      <link>http://www.hashnopolis.com/post/2019/03/max-stack/</link>
      <pubDate>Sun, 31 Mar 2019 02:37:36 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/max-stack/</guid>
      <description>Design a max stack that supports push, pop, top, peekMax and popMax.
1. push(x) &amp;ndash; Push element x onto stack. 2. pop() &amp;ndash; Remove the element on top of the stack and return it. 3. top() &amp;ndash; Get the element on the top. 4. peekMax() &amp;ndash; Retrieve the maximum element in the stack. 5. popMax() &amp;ndash; Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.</description>
    </item>
    
    <item>
      <title>Maximum Frequency Stack</title>
      <link>http://www.hashnopolis.com/post/2019/03/maximum-frequency-stack/</link>
      <pubDate>Tue, 12 Mar 2019 03:52:37 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/maximum-frequency-stack/</guid>
      <description>Implement FreqStack, a class which simulates the operation of a stack-like data structure.
FreqStack has two functions:
1. push(int x), which pushes an integer x onto the stack.
2. pop(), which removes and returns the most frequent element in the stack.
3. If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.
Example 1: Input: [&amp;quot;FreqStack&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;], [[],[5],[7],[5],[7],[4],[5],[],[],[],[]] Output: [null,null,null,null,null,null,null,5,7,5,4] Explanation: After making six .</description>
    </item>
    
    <item>
      <title>Largest Rectangle in Histogram</title>
      <link>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</link>
      <pubDate>Mon, 25 Feb 2019 23:58:00 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</guid>
      <description>Given n non-negative integers representing the histogram&amp;rsquo;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Example: Input: [2,1,5,6,2,3] Output: 10  Solution: Push height into the stack in ascending order.</description>
    </item>
    
    <item>
      <title>Valid Parentheses</title>
      <link>http://www.hashnopolis.com/post/2018/11/valid-parentheses/</link>
      <pubDate>Fri, 02 Nov 2018 20:30:23 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/valid-parentheses/</guid>
      <description>Given a string containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Note that an empty string is also considered valid.
Example 1: Input: &amp;quot;()&amp;quot; Output: true  Example 2: Input: &amp;quot;()[]{}&amp;quot; Output: true  Example 3: Input: &amp;quot;(]&amp;quot; Output: false  Example 4: Input: &amp;quot;([)]&amp;quot; Output: false  Example 5: Input: &amp;quot;{[]}&amp;quot; Output: true  Solution: class Solution { public boolean isValid(String s) { HashMap&amp;lt;Character, Character&amp;gt; charMap = new HashMap&amp;lt;&amp;gt;(); charMap.</description>
    </item>
    
    <item>
      <title>Min Stack</title>
      <link>http://www.hashnopolis.com/post/2018/10/min-stack/</link>
      <pubDate>Sun, 14 Oct 2018 23:55:15 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/min-stack/</guid>
      <description>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. - push(x) &amp;ndash; Push element x onto stack. - pop() &amp;ndash; Removes the element on top of the stack. - top() &amp;ndash; Get the top element. - getMin() &amp;ndash; Retrieve the minimum element in the stack.
Example MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --&amp;gt; Returns -3. minStack.pop(); minStack.top(); --&amp;gt; Returns 0.</description>
    </item>
    
    <item>
      <title>Add Binary</title>
      <link>http://www.hashnopolis.com/post/2018/09/add-binary/</link>
      <pubDate>Wed, 05 Sep 2018 23:48:48 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/add-binary/</guid>
      <description>Given two binary strings, return their sum (also a binary string).
The input strings are both non-empty and contains only characters 1 or 0.
Example 1 Input: a = &amp;quot;11&amp;quot;, b = &amp;quot;1&amp;quot; Output: &amp;quot;100&amp;quot;  Example 2 Input: a = &amp;quot;1010&amp;quot;, b = &amp;quot;1011&amp;quot; Output: &amp;quot;10101&amp;quot;  Solution class Solution: def addBinary(self, a, b): &amp;quot;&amp;quot;&amp;quot; :type a: str :type b: str :rtype: str &amp;quot;&amp;quot;&amp;quot; result = [] carry = 0 i = len(a)-1 j = len(b)-1 while carry or i &amp;gt;= 0 or j &amp;gt;= 0: total = carry if i &amp;gt;= 0: total += int(a[i]) i -= 1 if j &amp;gt;= 0: total += int(b[j]) j -= 1 result.</description>
    </item>
    
  </channel>
</rss>
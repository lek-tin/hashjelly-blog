<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/java/</link>
    <description>Recent content in java on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Thu, 04 Apr 2019 09:37:24 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unique Paths II</title>
      <link>http://www.hashnopolis.com/post/2019/03/unique-paths-ii/</link>
      <pubDate>Sat, 02 Mar 2019 12:24:17 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/unique-paths-ii/</guid>
      <description>A robot is located at the top-left corner of a m x n grid (marked &amp;lsquo;Start&amp;rsquo; in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &amp;lsquo;Finish&amp;rsquo; in the diagram below).
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.</description>
    </item>
    
    <item>
      <title>Largest Rectangle in Histogram</title>
      <link>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</link>
      <pubDate>Mon, 25 Feb 2019 23:58:00 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/largest-rectangle-in-histogram/</guid>
      <description>Given n non-negative integers representing the histogram&amp;rsquo;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Example: Input: [2,1,5,6,2,3] Output: 10 Solution: Push height into the stack in ascending order. When we encounter a height that is shorter than te top of the stack, we start to calculate area by popping heights out of the stack.</description>
    </item>
    
    <item>
      <title>Maximal Rectangle</title>
      <link>http://www.hashnopolis.com/post/2019/02/maximal-rectangle/</link>
      <pubDate>Mon, 25 Feb 2019 00:41:33 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/maximal-rectangle/</guid>
      <description>Given a 2D binary matrix filled with 0&amp;rsquo;s and 1&amp;rsquo;s, find the largest rectangle containing only 1&amp;rsquo;s and return its area.
Example: Input: [ [&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;], [&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;], [&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;], [&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;0&amp;quot;] ] Output: 6 Hint Height:
1 0 1 0 0 2 0 2 1 1 3 1 3 2 2 4 0 0 3 0 Left:
0 0 2 0 0 0 0 2 2 2 0 0 2 2 2 0 0 0 3 0 Right:</description>
    </item>
    
    <item>
      <title>Best Meeting Point</title>
      <link>http://www.hashnopolis.com/post/2019/02/best-meeting-point/</link>
      <pubDate>Thu, 21 Feb 2019 10:15:51 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/best-meeting-point/</guid>
      <description>A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.
Example: Input: 1 - 0 - 0 - 0 - 1 | | | | | 0 - 0 - 0 - 0 - 0 | | | | | 0 - 0 - 1 - 0 - 0 Output: 6 ###Explanation: Given three people living at (0,0), (0,4), and (2,2): The point (0,2) is an ideal meeting point, as the total travel distance of 2+2+2=6 is minimal.</description>
    </item>
    
    <item>
      <title>Longest Common Subsequence</title>
      <link>http://www.hashnopolis.com/post/2019/02/longest-common-subsequence/</link>
      <pubDate>Fri, 15 Feb 2019 17:28:18 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/longest-common-subsequence/</guid>
      <description>The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences). It differs from the longest common substring problem: unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences.
Optimal Substructure: Let the input sequences be X[0..m-1] and Y[0..n-1] of lengths m and n respectively. And let L(X[0..m-1], Y[0..n-1]) be the length of LCS of the two sequences X and Y.</description>
    </item>
    
    <item>
      <title>Minimum Depth of Binary Tree</title>
      <link>http://www.hashnopolis.com/post/2019/02/minimum-depth-of-binary-tree/</link>
      <pubDate>Tue, 12 Feb 2019 16:58:46 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/minimum-depth-of-binary-tree/</guid>
      <description>Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.
Example: Given binary tree [3,9,20,null,null,15,7],
 3 / \ 9 20 / \ 15 7 return its minimum depth = 2. Solution: Recursion
/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public int minDepth(TreeNode root) { if (root == null) return 0; int left = minDepth(root.</description>
    </item>
    
    <item>
      <title>Container With Most Water</title>
      <link>http://www.hashnopolis.com/post/2019/01/container-with-most-water/</link>
      <pubDate>Sat, 26 Jan 2019 23:38:02 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/01/container-with-most-water/</guid>
      <description>Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2. The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7].</description>
    </item>
    
    <item>
      <title>Alien Dictionary</title>
      <link>http://www.hashnopolis.com/post/2018/12/alien-dictionary/</link>
      <pubDate>Sat, 08 Dec 2018 23:57:13 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/12/alien-dictionary/</guid>
      <description>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.
Example 1 Input: [ &amp;quot;wrt&amp;quot;, &amp;quot;wrf&amp;quot;, &amp;quot;er&amp;quot;, &amp;quot;ett&amp;quot;, &amp;quot;rftt&amp;quot; ] Output: &amp;quot;wertf&amp;quot; Example 2 Input: [ &amp;quot;z&amp;quot;, &amp;quot;x&amp;quot; ] Output: &amp;quot;zx&amp;quot; Example 3 Input: [ &amp;quot;z&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;z&amp;quot; ] Output: &amp;quot;&amp;quot; Explanation The order is invalid, so return &amp;ldquo;&amp;quot;.</description>
    </item>
    
    <item>
      <title>Install Java on Linux</title>
      <link>http://www.hashnopolis.com/post/2018/11/install-java-on-linux/</link>
      <pubDate>Tue, 20 Nov 2018 12:12:47 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/install-java-on-linux/</guid>
      <description>Install manually Step 1: Download the source package from the oracle repository. If your computer is 64-bit, download the x64 version; if it is 32-bit, download the x86 version.
Step 2: Extract from the compressed file and move the package folder to /usr/java. rememeber to run these commands as sudo is not the root user.
mv downloads-folder/jdk-&amp;lt;version&amp;gt;-linux-xxx.tar.gz /usr/java tar -xvzf jdk-&amp;lt;version&amp;gt;-linux-xxx.tar.gz rm jdk-&amp;lt;version&amp;gt;-linux-xxx.tar.gz Step 3: Add the java path to the ~/.</description>
    </item>
    
    <item>
      <title>Unique Paths</title>
      <link>http://www.hashnopolis.com/post/2018/09/unique-paths/</link>
      <pubDate>Sat, 15 Sep 2018 12:54:17 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/unique-paths/</guid>
      <description>A robot is located at the top-left corner of a m x n grid (marked &amp;lsquo;Start&amp;rsquo; in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &amp;lsquo;Finish&amp;rsquo; in the diagram below).
How many possible unique paths are there?
Above is a 7 x 3 grid. How many possible unique paths are there?</description>
    </item>
    
  </channel>
</rss>
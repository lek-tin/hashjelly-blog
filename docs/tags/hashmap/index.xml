<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashmap on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/hashmap/</link>
    <description>Recent content in Hashmap on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sun, 11 Aug 2019 23:34:11 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/hashmap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Copy List With Random Pointer</title>
      <link>http://www.hashnopolis.com/post/2019/08/copy-list-with-random-pointer/</link>
      <pubDate>Sun, 11 Aug 2019 23:34:11 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/08/copy-list-with-random-pointer/</guid>
      <description>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.
Solution Solution 1: Insert cloned nodes in between original nodes then connect the cloned nodes
# Definition for singly-linked list with a random pointer. # class RandomListNode(object): # def __init__(self, x): # self.label = x # self.next = None # self.</description>
    </item>
    
    <item>
      <title>Longest Substring With at Most Two Distinct Characters</title>
      <link>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-two-distinct-characters/</link>
      <pubDate>Sat, 16 Mar 2019 13:30:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-two-distinct-characters/</guid>
      <description>Given a string s, find the length of the longest substring t that contains at most 2 distinct characters.
Example 1: Input: &amp;quot;eceba&amp;quot; Output: 3 Explanation: t is &amp;quot;ece&amp;quot; which its length is 3.  Example 2: Input: &amp;quot;ccaabbb&amp;quot; Output: 5 Explanation: t is &amp;quot;aabbb&amp;quot; which its length is 5.  Solution class Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { HashMap&amp;lt;Character, Integer&amp;gt; countMap = new HashMap&amp;lt;Character, Integer&amp;gt;(); int left = 0; int max = 0; for (int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Longest Substring With at Most K Distinct Characters</title>
      <link>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-k-distinct-characters/</link>
      <pubDate>Thu, 14 Mar 2019 01:03:53 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/longest-substring-with-at-most-k-distinct-characters/</guid>
      <description>Given a string, find the length of the longest substring T that contains at most k distinct characters.
Example 1: Input: s = &amp;quot;eceba&amp;quot;, k = 2 Output: 3 Explanation: T is &amp;quot;ece&amp;quot; which its length is 3.  Example 2: Input: s = &amp;quot;aa&amp;quot;, k = 1 Output: 2 Explanation: T is &amp;quot;aa&amp;quot; which its length is 2.  Solution class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { Map&amp;lt;Character, Integer&amp;gt; countMap = new HashMap&amp;lt;&amp;gt;(); int left = 0; int max = 0; for(int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Maximum Frequency Stack</title>
      <link>http://www.hashnopolis.com/post/2019/03/maximum-frequency-stack/</link>
      <pubDate>Tue, 12 Mar 2019 03:52:37 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/maximum-frequency-stack/</guid>
      <description>Implement FreqStack, a class which simulates the operation of a stack-like data structure.
FreqStack has two functions:
1. push(int x), which pushes an integer x onto the stack.
2. pop(), which removes and returns the most frequent element in the stack.
3. If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.
Example 1: Input: [&amp;quot;FreqStack&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;push&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;,&amp;quot;pop&amp;quot;], [[],[5],[7],[5],[7],[4],[5],[],[],[],[]] Output: [null,null,null,null,null,null,null,5,7,5,4] Explanation: After making six .</description>
    </item>
    
    <item>
      <title>Most Common Word</title>
      <link>http://www.hashnopolis.com/post/2019/03/most-common-word/</link>
      <pubDate>Thu, 07 Mar 2019 23:04:58 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/most-common-word/</guid>
      <description>Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words. It is guaranteed there is at least one word that isn&amp;rsquo;t banned, and that the answer is unique.
Words in the list of banned words are given in lowercase, and free of punctuation. Words in the paragraph are not case sensitive. The answer is in lowercase.</description>
    </item>
    
    <item>
      <title>Intersection of Two Arrays II</title>
      <link>http://www.hashnopolis.com/post/2019/02/intersection-of-two-arrays-ii/</link>
      <pubDate>Mon, 18 Feb 2019 23:55:24 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/02/intersection-of-two-arrays-ii/</guid>
      <description>Given two arrays, write a function to compute their intersection.
Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2]  Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9]  Note: Each element in the result should appear as many times as it shows in both arrays. The result can be in any order.
Follow up:  What if the given array is already sorted? How would you optimize your algorithm?</description>
    </item>
    
    <item>
      <title>Longest Substring Without Repeating Characters</title>
      <link>http://www.hashnopolis.com/post/2019/01/longest-substring-without-repeating-characters/</link>
      <pubDate>Tue, 22 Jan 2019 22:24:06 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/01/longest-substring-without-repeating-characters/</guid>
      <description>Given a string, find the length of the longest substring without repeating characters.
*### Example 1
Input: &amp;quot;abcabcbb&amp;quot; Output: 3 Explanation: The answer is &amp;quot;abc&amp;quot;, with the length of 3.  *### Example 2
Input: &amp;quot;bbbbb&amp;quot; Output: 1 Explanation: The answer is &amp;quot;b&amp;quot;, with the length of 1.  *### Example 3
Input: &amp;quot;pwwkew&amp;quot; Output: 3 Explanation: The answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.</description>
    </item>
    
    <item>
      <title>Encode and Decode Tinyurl</title>
      <link>http://www.hashnopolis.com/post/2018/11/encode-and-decode-tinyurl/</link>
      <pubDate>Sun, 11 Nov 2018 18:48:12 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/encode-and-decode-tinyurl/</guid>
      <description>Note This is a companion problem to the System Design problem: Design TinyURL. TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.
Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</description>
    </item>
    
    <item>
      <title>LRU Cache</title>
      <link>http://www.hashnopolis.com/post/2018/11/lru-cache/</link>
      <pubDate>Sun, 11 Nov 2018 15:33:09 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/lru-cache/</guid>
      <description>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</description>
    </item>
    
    <item>
      <title>Top K Frequent Elements</title>
      <link>http://www.hashnopolis.com/post/2018/09/top-k-frequent-elements/</link>
      <pubDate>Sun, 16 Sep 2018 15:04:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/top-k-frequent-elements/</guid>
      <description>Given a non-empty array of integers, return the k most frequent elements.
For example, Given [1,1,1,2,2,3] and k = 2, return [1,2].
Note You may assume k is always valid, 1 ≤ k ≤ number of unique elements. Your algorithm&amp;rsquo;s time complexity must be better than O(n log n), where n is the array&amp;rsquo;s size.
Solution class Solution: def topKFrequent(self, nums, k): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type k: int :rtype: List[int] &amp;quot;&amp;quot;&amp;quot; freqMap = dict() for num in nums: if freqMap.</description>
    </item>
    
    <item>
      <title>Valid Anagram</title>
      <link>http://www.hashnopolis.com/post/2018/09/valid-anagram/</link>
      <pubDate>Sat, 15 Sep 2018 12:53:21 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/valid-anagram/</guid>
      <description>Given two strings s and t , write a function to determine if t is an anagram of s.
Example 1:
Input: s = &amp;quot;anagram&amp;quot;, t = &amp;quot;nagaram&amp;quot; Output: true  Example 2:
Input: s = &amp;quot;rat&amp;quot;, t = &amp;quot;car&amp;quot; Output: false  Note: You may assume the string contains only lowercase alphabets.
Follow-up What if the inputs contain unicode characters? How would you adapt your solution to such case?</description>
    </item>
    
    <item>
      <title>Roman to Integer</title>
      <link>http://www.hashnopolis.com/post/2018/09/roman-to-integer/</link>
      <pubDate>Sat, 15 Sep 2018 12:47:14 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/roman-to-integer/</guid>
      <description>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000  For example, two is written as II in Roman numeral, just two one&amp;rsquo;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</description>
    </item>
    
    <item>
      <title>Two Sum</title>
      <link>http://www.hashnopolis.com/post/2018/08/two-sum/</link>
      <pubDate>Wed, 29 Aug 2018 00:44:49 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/08/two-sum/</guid>
      <description> Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  Solution # time: o(n) # space: o(n) class Solution: def twoSum(self, nums, target): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type target: int :rtype: List[int] &amp;quot;&amp;quot;&amp;quot; res = [-1, -1] if nums == None or len(nums) &amp;lt; 2: return res solutionMap = {} for pos in range(len(nums) - 1): if (target - nums[pos]) in solutionMap: res[0] = solutionMap[target - nums[pos]] res[1] = pos break solutionMap[nums[pos]] = pos return res  </description>
    </item>
    
  </channel>
</rss>
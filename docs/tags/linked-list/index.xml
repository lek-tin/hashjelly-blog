<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linked List on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/linked-list/</link>
    <description>Recent content in Linked List on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Mon, 21 Jan 2019 23:38:03 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/linked-list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Two Numbers</title>
      <link>http://www.hashnopolis.com/post/2019/01/add-two-numbers/</link>
      <pubDate>Mon, 21 Jan 2019 23:38:03 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/01/add-two-numbers/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>Copy List With Random Pointer</title>
      <link>http://www.hashnopolis.com/post/2019/01/copy-list-with-random-pointer/</link>
      <pubDate>Mon, 07 Jan 2019 23:34:11 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/01/copy-list-with-random-pointer/</guid>
      <description>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.
Solution:
# Definition for singly-linked list with a random pointer. # class RandomListNode(object): # def __init__(self, x): # self.label = x # self.next = None # self.random = None class Solution(object): def copyRandomList(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: RandomListNode :rtype: RandomListNode &amp;quot;&amp;quot;&amp;quot; # corner case if head == None: return None # First pass: for each node in the original list, inset a copied node between the node tne node.</description>
    </item>
    
    <item>
      <title>Reverse Nodes in K Group</title>
      <link>http://www.hashnopolis.com/post/2018/11/reverse-nodes-in-k-group/</link>
      <pubDate>Tue, 13 Nov 2018 18:04:36 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/reverse-nodes-in-k-group/</guid>
      <description>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
Example: Given this linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5
For k = 2, you should return: 2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5</description>
    </item>
    
    <item>
      <title>LRU Cache</title>
      <link>http://www.hashnopolis.com/post/2018/11/lru-cache/</link>
      <pubDate>Sun, 11 Nov 2018 15:33:09 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/lru-cache/</guid>
      <description>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</description>
    </item>
    
    <item>
      <title>Linked List Cycle II</title>
      <link>http://www.hashnopolis.com/post/2018/10/linked-list-cycle-ii/</link>
      <pubDate>Sun, 21 Oct 2018 23:08:30 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/linked-list-cycle-ii/</guid>
      <description>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
Note: Do not modify the linked list.
Follow up: Can you solve it without using extra space?
Solution: /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head) { if (head == null) return null; ListNode slow = head; ListNode fast = head; boolean hasCycle = false; while (slow.</description>
    </item>
    
    <item>
      <title>Linked List Cycle</title>
      <link>http://www.hashnopolis.com/post/2018/10/linked-list-cycle/</link>
      <pubDate>Sun, 21 Oct 2018 23:07:55 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/linked-list-cycle/</guid>
      <description>Given a linked list, determine if it has a cycle in it.
Follow up: Can you solve it without using extra space? Solution:
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def hasCycle(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :rtype: bool &amp;quot;&amp;quot;&amp;quot; slow = head fast = head while fast: # fast reaches the end, no cycle was detected if fast and not fast.</description>
    </item>
    
    <item>
      <title>Reverse Linked List</title>
      <link>http://www.hashnopolis.com/post/2018/10/reverse-linked-list/</link>
      <pubDate>Tue, 02 Oct 2018 23:51:13 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/reverse-linked-list/</guid>
      <description>Reverse a singly linked list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL  Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both? Solution:
# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # null 1 ---- 2 ---- 3 ---- 4 ---- 5 # prev curr after # prev curr after # https://www.youtube.com/watch?v=D7y_hoT_YZI class Solution: def reverseList(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; curr, prev, after = head, None, ListNode(None) while curr !</description>
    </item>
    
    <item>
      <title>Reverse Linked List II</title>
      <link>http://www.hashnopolis.com/post/2018/09/reverse-linked-list-ii/</link>
      <pubDate>Sun, 30 Sep 2018 22:19:41 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/reverse-linked-list-ii/</guid>
      <description>Reverse a linked list from position m to n. Do it in one-pass.
Note: 1 ≤ m ≤ n ≤ length of list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4 Output: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL  *Solution:**
class Solution: def reverseBetween(self, head, m, n): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :type m: int :type n: int :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; dummy = ListNode(None) dummy.next = head pre = dummy curr = dummy.next for i in range(1, m): curr = curr.</description>
    </item>
    
    <item>
      <title>Remove Linked List Elements</title>
      <link>http://www.hashnopolis.com/post/2018/09/remove-linked-list-elements/</link>
      <pubDate>Tue, 18 Sep 2018 16:07:09 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/remove-linked-list-elements/</guid>
      <description>Remove all elements from a linked list of integers that have value val.
Example:
Input: 1-&amp;gt;2-&amp;gt;6-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;6, val = 6 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5  Solution:
# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def removeElements(self, head, val): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :type val: int :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; pre = ListNode(0) pre.next = head pos = pre while pos.next !</description>
    </item>
    
    <item>
      <title>Remove Duplicates From Sorted List</title>
      <link>http://www.hashnopolis.com/post/2018/09/remove-duplicates-from-sorted-list/</link>
      <pubDate>Sun, 16 Sep 2018 15:01:24 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/remove-duplicates-from-sorted-list/</guid>
      <description>Given a sorted linked list, delete all duplicates such that each element appear only once.
Example 1:
Input: 1-&amp;gt;1-&amp;gt;2 Output: 1-&amp;gt;2  Example 2:
Input: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3 Output: 1-&amp;gt;2-&amp;gt;3  Solution:
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def deleteDuplicates(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; curr = head while curr != None and curr.</description>
    </item>
    
    <item>
      <title>Delete Node in a Linked List</title>
      <link>http://www.hashnopolis.com/post/2018/09/delete-node-in-a-linked-list/</link>
      <pubDate>Fri, 14 Sep 2018 11:49:07 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/delete-node-in-a-linked-list/</guid>
      <description>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.
Supposed the linked list is 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 and you are given the third node with value 3, the linked list should become 1 -&amp;gt; 2 -&amp;gt; 4 after calling your function.
Solution:
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.</description>
    </item>
    
    <item>
      <title>Remove Nth Node From End of List</title>
      <link>http://www.hashnopolis.com/post/2018/08/remove-nth-node-from-end-of-list/</link>
      <pubDate>Mon, 20 Aug 2018 23:33:38 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/08/remove-nth-node-from-end-of-list/</guid>
      <description>Given a linked list, remove the n-th node from the end of list and return its head.
Example:
Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.  Note:
Given n will always be valid.
Follow up:
Could you do this in one pass?
Solution:
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.</description>
    </item>
    
  </channel>
</rss>
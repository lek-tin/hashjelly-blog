<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>level-traversal on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/level-traversal/</link>
    <description>Recent content in level-traversal on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Wed, 26 Feb 2020 20:20:25 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/level-traversal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Populating Next Right Pointers in Each Node</title>
      <link>http://www.hashnopolis.com/post/populating-next-right-pointers-in-each-node/</link>
      <pubDate>Wed, 26 Feb 2020 20:20:25 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/populating-next-right-pointers-in-each-node/</guid>
      <description>You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:
struct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.
Initially, all next pointers are set to NULL.</description>
    </item>
    
    <item>
      <title>Populating Next Right Pointers in Each Node II</title>
      <link>http://www.hashnopolis.com/post/populating-next-right-pointers-in-each-node-ii/</link>
      <pubDate>Wed, 26 Feb 2020 20:19:59 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/populating-next-right-pointers-in-each-node-ii/</guid>
      <description>Given a binary tree
struct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.
Initially, all next pointers are set to NULL.
Follow up  You may only use constant extra space. Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iterator on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/iterator/</link>
    <description>Recent content in Iterator on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Tue, 12 Mar 2019 15:43:28 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/iterator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Peeking Iterator</title>
      <link>http://www.hashnopolis.com/post/2019/03/peeking-iterator/</link>
      <pubDate>Tue, 12 Mar 2019 15:43:28 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2019/03/peeking-iterator/</guid>
      <description>Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation &amp;ndash; it essentially peek() at the element that will be returned by the next call to next().
Example: Assume that the iterator is initialized to the beginning of the list: [1,2,3]. Call next() gets you 1, the first element in the list. Now you call peek() and it returns 2, the next element.</description>
    </item>
    
    <item>
      <title>Flatten Nested List Iterator</title>
      <link>http://www.hashnopolis.com/post/2018/11/flatten-nested-list-iterator/</link>
      <pubDate>Tue, 13 Nov 2018 20:03:07 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/flatten-nested-list-iterator/</guid>
      <description>Given a nested list of integers, implement an iterator to flatten it.
Each element is either an integer, or a list &amp;ndash; whose elements may also be integers or other lists.
Example 1 Input: [[1,1],2,[1,1]] Output: [1,1,2,1,1] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1,1,2,1,1]`.  Example 2 Input: [1,[4,[6]]] Output: [1,4,6] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1,4,6]`.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iterative on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/iterative/</link>
    <description>Recent content in Iterative on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Tue, 02 Oct 2018 23:51:13 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/iterative/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reverse Linked List</title>
      <link>http://www.hashnopolis.com/post/2018/10/reverse-linked-list/</link>
      <pubDate>Tue, 02 Oct 2018 23:51:13 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/reverse-linked-list/</guid>
      <description>Reverse a singly linked list.
Example:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL  Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both? Solution:
# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None # null 1 ---- 2 ---- 3 ---- 4 ---- 5 # prev curr after # prev curr after # https://www.youtube.com/watch?v=D7y_hoT_YZI class Solution: def reverseList(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; curr, prev, after = head, None, ListNode(None) while curr !</description>
    </item>
    
  </channel>
</rss>
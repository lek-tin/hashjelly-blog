<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Double Linked List on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/double-linked-list/</link>
    <description>Recent content in Double Linked List on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Wed, 26 Dec 2018 01:24:33 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/double-linked-list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Convert Binary Search Tree to Sorted Doubly Linked List</title>
      <link>http://www.hashnopolis.com/post/2018/12/convert-binary-search-tree-to-sorted-doubly-linked-list/</link>
      <pubDate>Wed, 26 Dec 2018 01:24:33 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/12/convert-binary-search-tree-to-sorted-doubly-linked-list/</guid>
      <description>Convert a BST to a sorted circular doubly-linked list in-place. Think of the left and right pointers as synonymous to the previous and next pointers in a doubly-linked list.
Let&amp;rsquo;s take the following BST as an example, it may help you understand the problem better:
We want to transform this BST into a circular doubly linked list. Each node in a doubly linked list has a predecessor and successor. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</description>
    </item>
    
  </channel>
</rss>
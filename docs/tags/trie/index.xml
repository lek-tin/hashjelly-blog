<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trie on Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/trie/</link>
    <description>Recent content in Trie on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Thu, 08 Nov 2018 23:07:10 -0800</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/trie/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implement Trie Prefix Tree</title>
      <link>http://www.hashnopolis.com/post/2018/11/implement-trie-prefix-tree/</link>
      <pubDate>Thu, 08 Nov 2018 23:07:10 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/implement-trie-prefix-tree/</guid>
      <description>Implement a trie with insert, search, and startsWith methods.
Example Trie trie = new Trie(); trie.insert(&amp;quot;apple&amp;quot;); trie.search(&amp;quot;apple&amp;quot;); // returns true trie.search(&amp;quot;app&amp;quot;); // returns false trie.startsWith(&amp;quot;app&amp;quot;); // returns true trie.insert(&amp;quot;app&amp;quot;); trie.search(&amp;quot;app&amp;quot;); // returns true  Note You may assume that all inputs are consist of lowercase letters a-z. All inputs are guaranteed to be non-empty strings.
Solution Python
class TrieNode: def __init__(self): self.isEnd = False self.chars = [False for _ in range(26)] self.</description>
    </item>
    
    <item>
      <title>Add and Search Word Data Structure Design</title>
      <link>http://www.hashnopolis.com/post/2018/11/add-and-search-word-data-structure-design/</link>
      <pubDate>Thu, 08 Nov 2018 22:37:27 -0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/add-and-search-word-data-structure-design/</guid>
      <description>Design a data structure that supports the following two operations:
void addWord(word) bool search(word)  search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.
Example addWord(&amp;quot;bad&amp;quot;) addWord(&amp;quot;dad&amp;quot;) addWord(&amp;quot;mad&amp;quot;) search(&amp;quot;pad&amp;quot;) -&amp;gt; false search(&amp;quot;bad&amp;quot;) -&amp;gt; true search(&amp;quot;.ad&amp;quot;) -&amp;gt; true search(&amp;quot;b..&amp;quot;) -&amp;gt; true  Note You may assume that all words are consist of lowercase letters a-z.</description>
    </item>
    
  </channel>
</rss>
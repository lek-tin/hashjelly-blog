<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashnopolis</title>
    <link>http://www.hashnopolis.com/tags/two-pointers/</link>
    <description>Recent content on Hashnopolis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hashnopolis</copyright>
    <lastBuildDate>Sat, 03 Nov 2018 16:25:23 -0700</lastBuildDate>
    
	<atom:link href="http://www.hashnopolis.com/tags/two-pointers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Move Zeroes</title>
      <link>http://www.hashnopolis.com/post/2018/11/move-zeroes/</link>
      <pubDate>Sat, 03 Nov 2018 16:25:23 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/11/move-zeroes/</guid>
      <description>Given an array nums, write a function to move all 0&amp;rsquo;s to the end of it while maintaining the relative order of the non-zero elements.
For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].
Note: You must do this in-place without making a copy of the array. Minimize the total number of operations. Credits: Special thanks to @jianchao.</description>
    </item>
    
    <item>
      <title>Kth Largest Element in an Array</title>
      <link>http://www.hashnopolis.com/post/2018/10/kth-largest-element-in-an-array/</link>
      <pubDate>Wed, 24 Oct 2018 23:38:20 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/10/kth-largest-element-in-an-array/</guid>
      <description>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.
Example 1:
Input: [3,2,1,5,6,4] and k = 2 Output: 5  Example 2:
Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4  Note: You may assume k is always valid, 1 ≤ k ≤ array&#39;s length. Solution:
class Solution: def findKthLargest(self, nums, k): if (nums == None or len(nums) == 0): return 0 left, right = 0, len(nums) - 1 def swap(nums, i, j): temp = nums[i] nums[i] = nums[j] nums[j] = temp def partition(nums, left, right): pivot = nums[left] l = left + 1 r = right while l &amp;lt;= r: if nums[l] &amp;lt; pivot and nums[r] &amp;gt; pivot: swap(nums, l, r) l += 1 r -= 1 if nums[l] &amp;gt;= pivot: l += 1 if nums[r] &amp;lt;= pivot: r -= 1 swap(nums, left, r) return r while True: pos = partition(nums, left, right) if pos + 1 == k: return nums[pos] elif pos + 1 &amp;gt; k: right = pos - 1 elif pos + 1 &amp;lt; k: left = pos + 1  </description>
    </item>
    
    <item>
      <title>Remove Duplicates From Sorted List II</title>
      <link>http://www.hashnopolis.com/post/2018/09/remove-duplicates-from-sorted-list-ii/</link>
      <pubDate>Wed, 19 Sep 2018 10:38:38 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/remove-duplicates-from-sorted-list-ii/</guid>
      <description>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Example 1:
Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 Output: 1-&amp;gt;2-&amp;gt;5  Example 2:
Input: 1-&amp;gt;1-&amp;gt;1-&amp;gt;2-&amp;gt;3 Output: 2-&amp;gt;3  </description>
    </item>
    
    <item>
      <title>Remove Linked List Elements</title>
      <link>http://www.hashnopolis.com/post/2018/09/remove-linked-list-elements/</link>
      <pubDate>Tue, 18 Sep 2018 16:07:09 -0700</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/09/remove-linked-list-elements/</guid>
      <description>Remove all elements from a linked list of integers that have value val.
Example:
Input: 1-&amp;gt;2-&amp;gt;6-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;6, val = 6 Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5  Solution:
# Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def removeElements(self, head, val): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :type val: int :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; pre = ListNode(0) pre.next = head pos = pre while pos.next !</description>
    </item>
    
    <item>
      <title>15. 3sum</title>
      <link>http://www.hashnopolis.com/post/2018/08/15.-3sum/</link>
      <pubDate>Mon, 27 Aug 2018 23:29:18 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/08/15.-3sum/</guid>
      <description>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example:
Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  Solution:</description>
    </item>
    
    <item>
      <title>80. Remove Duplicates From Sorted Array II</title>
      <link>http://www.hashnopolis.com/post/2018/08/80.-remove-duplicates-from-sorted-array-ii/</link>
      <pubDate>Fri, 24 Aug 2018 00:48:48 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/08/80.-remove-duplicates-from-sorted-array-ii/</guid>
      <description>Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Example 1:
Given nums = [1,1,1,2,2,3], Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</description>
    </item>
    
    <item>
      <title>Remove Duplicates From Sorted Array</title>
      <link>http://www.hashnopolis.com/post/2018/08/remove-duplicates-from-sorted-array/</link>
      <pubDate>Thu, 23 Aug 2018 23:52:17 +0800</pubDate>
      
      <guid>http://www.hashnopolis.com/post/2018/08/remove-duplicates-from-sorted-array/</guid>
      <description>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Example 1:
Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the returned length.</description>
    </item>
    
  </channel>
</rss>